package com.calsoft.user.dao;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.calsoft.exeception.DuplicateUser;
import com.calsoft.factory.Factory;
import com.calsoft.report.model.Report;
import com.calsoft.user.model.Appraisal;
import com.calsoft.user.model.Role;
import com.calsoft.user.model.User;
import com.calsoft.user.model.UserRole;
import com.calsoft.user.model.UserTask;
import com.calsoft.user.service.UserService;
import com.calsoft.util.HbnUtil;
import com.calsoft.util.Mycomparator;
import com.calsoft.util.TimeUtility;

@SuppressWarnings("unchecked")
public class UserDaoImpl implements UserDao{
	private static final Logger logger = Logger.getLogger("name");
	UserService userService;
	private ArrayList<String> taskListMessage = null;
	static UserDaoImpl daoImpl;
	public UserDaoImpl() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean addUser(User user,Session session,int roleId) throws Exception{
		// TODO Auto-generated method stub
		try {
			int id=user.getUser_Id();
			if(id!=0)
			{
				User user1=(User)session.load(User.class,id);
				user1.setUser_name(user.getUser_name());
				user1.setMail(user.getMail());
				user1.setStatus(user.getStatus());
				user1.setPassWord(user.getPassWord());
				session.update(user1);	
			}
			else
			{
				session.save(user);
				/*Role role1=new Role();
				Query query=session.createQuery("from Role where roleName=:rolename");
				query.setParameter("rolename","user");
				List list=query.list();
				Iterator iterator=list.iterator();
				while(iterator.hasNext()){
					role1=(Role)iterator.next();
				}*/
				UserRole role=new UserRole();
				role.setRoleId(roleId);
				role.setUserId(user.getUser_Id());
				session.save(role);
				//System.out.println("added successfully ");
			}
			return true;
		} 

		catch (org.hibernate.exception.ConstraintViolationException e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new DuplicateUser();
			//return false;
		}

	}
	public  List <User> getUserName() throws Exception
	{
		List<User> userList=new ArrayList<User>();
		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		List<Object> userObjects = session.createQuery("FROM User").list();
		for (Iterator<Object> iterator = userObjects.iterator(); iterator.hasNext();) {
			User user=(User)iterator.next();
			userList.add(user);
		}
		tx.commit();
		Collections.sort(userList,new Mycomparator());
		return userList;
	}
	public List<User> getUser() throws Exception{
		// TODO Auto-generated method stub
		List<User> userList=null;
		Session session=HbnUtil.getSession();
		session.beginTransaction();
		Query query=session.createQuery("from User order by user_name");
		userList=query.list();
		return userList;
	}
	@Override
	public User getUsernameFromId(int userId) {
		// TODO Auto-generated method stub
		List<User> userList=null;
		User user=null;
		try
		{
			Session session=HbnUtil.getSession();
			session.beginTransaction();
			Query query=session.createQuery("from User where user_Id="+userId);
			userList=query.list();
			Iterator<User> itr=userList.iterator();
			while(itr.hasNext())
			{
				user=itr.next();
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return user;
	}

	public boolean deActivateUser(User user) throws Exception{
		// TODO Auto-generated method stub
		Session session=HbnUtil.getSession();
		session.beginTransaction();
		//SQLQuery query=session.createSQLQuery("update Users");
		user = (User) session.load(User.class,user.getUser_Id());
		user.setStatus("InActive");
		//System.out.println("the username  "+user.getUser_name());
		session.update(user);
		session.getTransaction().commit();
		return true;
	}
	public boolean globalUser(User user) throws Exception{
		// TODO Auto-generated method stub		
		//System.out.println("Inside globalUser Method");
		Session session=HbnUtil.getSession();
		session.beginTransaction();
		//SQLQuery query=session.createSQLQuery("update Users");
		user = (User) session.load(User.class,user.getUser_Id());		
		boolean globalPass = false;

		if(user!=null && user.getDefpass().equalsIgnoreCase("timesheet"))
		{	
			user.setDefpass("NotGlobal");	
			globalPass = true;
		}
		else if(user!=null && !user.getDefpass().equalsIgnoreCase("timesheet") || user.getDefpass() == "")
		{
			user.setDefpass("timesheet");
			globalPass = true;
		}
		//System.out.println(user.getDefpass()+"user.getDefpass()");
		//globalPass = user.getDefpass();
		//System.out.println("the username  "+user.getUser_name());
		session.update(user);
		session.getTransaction().commit();
		return globalPass;
	}
	@Override
	public User getUser(int id)throws Exception {
		// TODO Auto-generated method stub
		Session session=HbnUtil.getSession();
		User user=(User)session.load(User.class,id);
		return user;
	}

	@Override
	public String matchUser(User user, HttpServletRequest request) throws Exception
	{
		String status = null;	
		Session session=HbnUtil.getSession();
		session.beginTransaction();       
		List<String> activeList = session.createSQLQuery("select status from users where email='"+user.getMail()+"'").list();		
		if(activeList!=null && !activeList.isEmpty())
		{
			status = activeList.get(0);
		}
		if(status!=null && status.equalsIgnoreCase("Active"))
		{
			List<Object[]> list = session.createSQLQuery("select user_name,user_id from users where email='"+user.getMail()+"' and (password='"+user.getPassWord()+"' or defpass='"+user.getPassWord()+"')").list();
			String userName = null;
			if(list!=null && !list.isEmpty())
			{
				Object[] obj = list.get(0);
				userName = (String)obj[0];
				int user_id  = (Integer)obj[1];
				HttpSession session1 = request.getSession();
				session1.setAttribute("user_id", user_id);
				session1.setAttribute("userName", "Welcome, "+userName);
				String sql2 ="select distinct(role.role_name) from role inner join user_role on role.role_id= (select role_id from user_role where user_role.user_id=(select users.user_id from users where email='"+user.getMail()+"' and (password='"+user.getPassWord()+"' or defpass='"+user.getPassWord()+"')));";
				try
				{
					status = (String)session.createSQLQuery(sql2).list().get(0);
				}
				catch (IndexOutOfBoundsException e)
				{
					return status = "errorOnAddUser";
				}
				return status;
			}	
			else
			{
				status=null;  // User is active but password not matches with DB password.
			}
		}
		session.getTransaction().commit();
		return status;
	}
	@Override
	public String storePassword(User user)  throws Exception
	{
		// TODO Auto-generated method stub
		Session session=HbnUtil.getSession();
		session.beginTransaction();
		// boolean status = false;
		String status = null;       
		if(session.createQuery("from User where email='"+user.getMail()+"'").list()!=null)
		{					
			List<String> activeList = session.createSQLQuery("select status from users where email='"+user.getMail()+"'").list();
			if(!activeList.isEmpty())
			{
				//System.out.println("Checking status of user after Login*****"+activeList.get(0));
				status = activeList.get(0);
			}			
			if(status!=null && status.equalsIgnoreCase("Active"))
			{									
				SQLQuery query = session.createSQLQuery("update users set password='"+user.getPassWord()+"' where email='"+user.getMail()+"'");
				query.executeUpdate();
				session.getTransaction().commit();
			}
		}
		//System.out.println("STATUS FROM USERDAOIMPL "+status);
		return status;
	}
	@Override
	public List<UserTask> getUserTask(int user_id) throws Exception
	{
		Session session=HbnUtil.getSession();
		session.beginTransaction();
		ArrayList<UserTask> taskList = new ArrayList<UserTask>();
		String sql = "select et.task_date, SEC_TO_TIME(SUM(TIME_TO_SEC(et.time))) as time,et.status from employee_task_detail et where et.user_id="+user_id+"  group by et.task_date order by  task_date DESC";
		List list = session.createSQLQuery(sql).list();
		Iterator<Object[]> iterator = list.iterator();
		taskListMessage = new ArrayList<String>();
		UserTask userTask = null;
		while(iterator.hasNext()) 
		{
			userTask = new UserTask();
			Object[] obj = (Object[]) iterator.next();		 
			Date cd = (Date)obj[0];
			String sqlNow = "SELECT * FROM leave_detail where leave_detail.leave_month='"+TimeUtility.getUrsMonth(cd)+"' and leave_date="+TimeUtility.getUrsDay(cd)+" and leave_detail.user_id="+user_id+" ";
			//System.out.println(sqlNow+"sqlNow");
			List listDate = session.createSQLQuery(sqlNow).list();
			if(!listDate.isEmpty()&& (obj[2].toString().equalsIgnoreCase("Public holiday")||obj[2].toString().equalsIgnoreCase("Half Day")||obj[2].toString().equalsIgnoreCase("Leave")))
			{
				userTask.setStatus(obj[2].toString());
			}				
			DateFormat fr1 = new SimpleDateFormat("MM/dd/yyyy");
			userTask.setTask_date(fr1.format(cd));			
			String DBtime = obj[1].toString();
			userTask.setTime(DBtime.substring(0,DBtime.lastIndexOf(':')));   // MODIFICATION 31-07
			String time = userTask.getTime();			
			Date dateFromDB = null;			
			dateFromDB = fr1.parse(userTask.getTask_date());
			Calendar cal = GregorianCalendar.getInstance();
			Date currentMonth = new Date();
			cal.setTime(currentMonth);
			String currentMonthAsSting = fr1.format(cal.getTime());
			cal.set(Calendar.MONTH, cal.get(Calendar.MONTH)-1);
			String prevMonthAsString = fr1.format(cal.getTime());
			//System.out.println("nextMonthAsString"+prevMonthAsString);
			Date currentMonthDate = null;
			Date prevMonthDate = null;
			currentMonthDate = fr1.parse(currentMonthAsSting);
			prevMonthDate = fr1.parse(prevMonthAsString);
			if(dateFromDB!=null && dateFromDB.getMonth()==currentMonthDate.getMonth()||dateFromDB.getMonth()==prevMonthDate.getMonth())
			{
				String lessTime = time.substring(0,time.indexOf(':'));	//MODIFICATION 31-07		
				if(Double.parseDouble(lessTime)<8 && Double.parseDouble(lessTime) >0)
				{
					String dtt = userTask.getTask_date();
					if(!taskListMessage.contains(" "+dtt+" : You worked only for "+time+" hrs."))
					{
						taskListMessage.add(" "+dtt+" : You worked only for "+time+" hrs.");
					}	
				}				
				else if(Double.parseDouble(lessTime) == 0)
				{
					String dtt = userTask.getTask_date();
					if(!taskListMessage.contains(" "+dtt+" : You worked nothing on that day"))
					{
						taskListMessage.add(" "+dtt+" : You worked nothing on that day");
					}	 
				}
			}
			DateFormat myFormat = new SimpleDateFormat("MM/dd/yyyy");
			Date myDate = null;
			myDate = myFormat.parse(userTask.getTask_date());
			if((myDate.getMonth()==new Date().getMonth()|| myDate.getMonth()+1==new Date().getMonth()) && TimeUtility.isDateInCurrentWeek(myDate))
			{			
				taskList.add(userTask);	
			}
		}	
		session.getTransaction().commit();
		return taskList;
	}


	public ArrayList<String> getTaskMessageList() throws Exception
	{		
		return this.taskListMessage;
	}

	@Override
	public List<User> getAllocatedResources(int userId) {
		// TODO Auto-generated method stub
		List<User> userList=new ArrayList<User>();
		try
		{
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query query = s1.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );
			//System.out.println("query string is:" + query);
			//List queryList1 = query.list();
			//  System.out.println("query list is:-----" + queryList1.size());
			Iterator<String[]> it = query.list().iterator();
			while (it.hasNext())
			{
				User user=new User();
				Object[] obj = (Object[]) it.next();
				Integer userIdTemp=(Integer)obj[0];
				int userIdValue=userIdTemp.intValue();
				user.setUser_Id(userIdValue);
				user.setUser_name((String) obj[1]);
				userList.add(user);
			}
			tx.commit();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return userList;
	}
	@Override
	public List<User> getAllocatedResourcesDetails(int userId, Calendar cal) {
		List<User> userList=new ArrayList<User>();
		try
		{
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query query = s1.createSQLQuery("select distinct(u.user_id),u.user_name,u.email from users u inner join report_mapping rm where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );
			Iterator<String[]> it = query.list().iterator();
			while (it.hasNext())
			{
				User user=new User();
				Object[] obj = (Object[]) it.next();
				Integer userIdTemp=(Integer)obj[0];
				int userIdValue=userIdTemp.intValue();
				user.setUser_Id(userIdValue);
				user.setUser_name((String) obj[1]);
				user.setMail(obj[2].toString());
				Query q1 = s1.createQuery("Select u.exit_date from User u where u.user_Id="+userIdValue+"");
				List<Date> exitList = q1.list();
				if(exitList.get(0)!=null){
					Date exitDate = exitList.get(0);
					Calendar calendar1 = Calendar.getInstance(); // Setting Exit_Date to this Calendar.			
					calendar1.setTime(exitDate);  
					calendar1.set(Calendar.DAY_OF_MONTH, calendar1.getActualMaximum(Calendar.DAY_OF_MONTH));  
					calendar1.set(Calendar.HOUR_OF_DAY, 23);
					calendar1.set(Calendar.MINUTE, 59);
					calendar1.set(Calendar.SECOND, 59);
					if(cal.before(calendar1)){
						userList.add(user);
					}
					else if(cal.equals(calendar1)){						
						userList.add(user);
					}
				}
				else{
					userList.add(user);
				}
			}
			tx.commit();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return userList;
	}
	@Override
	public boolean changePassword(User user, String newPassword)throws Exception {
		// TODO Auto-generated method stub
		boolean b=false;
		try {
			Session session=HbnUtil.getSession();
			User user2=(User)session.get(User.class,user.getUser_Id());
			//System.out.println("user pass "+user.getPassWord()+" database pass "+user2.getPassWord());
			if(user2.getPassWord().equals(user.getPassWord()))
			{
				session.beginTransaction();
				user2.setPassWord(newPassword);
				session.update(user2);
				session.getTransaction().commit();
				b=true;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception();
		}
		return b;
	}
	@Override
	public List<List<Report>> getUserReportAllocation(int userId) throws Exception {
		// TODO Auto-generated method stub
		List<Report> allocatedList=new ArrayList<Report>();
		List<Report> unallocatedList=new ArrayList<Report>();
		List<List<Report>> combinedList=new ArrayList<List<Report>>();
		String allocatedQueryString="select user_name,user_id  from users where user_id  in( select u.user_id from users u inner join report_mapping rm on u.user_id=rm.report_map_id and rm.user_id="+userId+")"; 
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		Query allocatedQuery = s1.createSQLQuery(allocatedQueryString);
		Iterator it1=allocatedQuery.list().iterator();
		while (it1.hasNext()) {
			Report report=new Report();
			Object[] obj = (Object[]) it1.next();
			String userName=(String)obj[0];
			Integer  userIdValue=(Integer)obj[1];
			int userIdValue1=userIdValue.intValue();
			report.setUserName(userName);
			report.setUserId(userIdValue1);
			allocatedList.add(report);
		}
		String unallocatedQueryString="select user_name,user_id  from users where user_id not in( select u.user_id from users u inner join report_mapping rm on u.user_id=rm.report_map_id and rm.user_id="+userId+")";
		Query unallocatedQuery = s1.createSQLQuery(unallocatedQueryString);
		Iterator it2=unallocatedQuery.list().iterator();
		while (it2.hasNext()) {
			Report report=new Report();
			Object[] obj = (Object[]) it2.next();
			String userName=(String)obj[0];
			Integer  userIdValue=(Integer)obj[1];
			int userIdValue1=userIdValue.intValue();
			report.setUserName(userName);
			report.setUserId(userIdValue1);
			unallocatedList.add(report);
		}
		combinedList.add(allocatedList);
		combinedList.add(unallocatedList);
		return combinedList;
	}


	// Retrieving Contact from DB and sending list 
	@Override
	public List<Object> getContactDetails() throws Exception 
	{		
		List<Object> masterList = new ArrayList<Object>();		
		Session s1 = HbnUtil.getSession();
		s1.beginTransaction();
		SQLQuery sqlQuery =  s1.createSQLQuery("SELECT contact_no,team,apo_mang,sk_id FROM contact where user_id= :user_id");		    
		UserDao userDao=Factory.getDao();	
		List<User> listOfAll = userDao.getUserName();
		for (User user : listOfAll) {
			String userName = user.getUser_name();
			String email = user.getMail();			
			if( (email.endsWith("@calsoftlabs.com") || (email.endsWith("@apollogrp.edu") && (email.equalsIgnoreCase("Venkataramana.Vemulapalli@apollogrp.edu")|| email.equalsIgnoreCase("Anuradha.Koduri@apollogrp.edu")))) )  {
				int userId = user.getUser_Id();
				//}
				//for(int i=0;i<allocatedResource.length;i++){
				//User user=itr.next();
				//int userId=Integer.parseInt(allocatedResource[i]);		
				//get the user name from user id				
				//User user=userDao.getUsernameFromId(userId);
				//String userName=user.getUser_name();	
				List<Object> list = new ArrayList<Object>();
				list.add(userName);
				sqlQuery.setParameter("user_id", userId);
				List<Object[]> listContact = sqlQuery.list();
				Iterator<Object[]> itr = listContact.iterator();
				String[] conDetail = new String[3];
				String team = "";
				String manager = "";
				String sky ="";
				int count = 0;
				if(!listContact.isEmpty() && listContact.size()==2){
					while (itr.hasNext()){
						Object[] con = (Object[])itr.next();					  
						conDetail[count] = (String)con[0];
						team = (String) con[1];
						manager = (String) con[2];
						sky = (String) con[3];
						count++;
					}
					list.add(conDetail);
					list.add(team);
					list.add(manager);
					list.add(sky);
				}		
				else if(!listContact.isEmpty()){					
					if(itr.hasNext()){
						Object[] con = (Object[])itr.next();					  
						conDetail[0] = (String)con[0];
						team = (String) con[1];
						manager = (String) con[2];
						sky = (String) con[3];
					}
					list.add(conDetail);
					list.add(team);
					list.add(manager);
					list.add(sky);
				}												
				masterList.add(list);
			}				
		}	
		s1.getTransaction().commit();
		return masterList;
	}

	@Override
	public List<Role> getAllRoles() throws Exception {
		// TODO Auto-generated method stub
		Session s1 = HbnUtil.getSession();
		s1.beginTransaction();
		List<Role> roleList  = s1.createQuery("from Role").list();		
		return roleList;
	}

	@Override
	public List<String> getTeamFromContact() throws Exception {
		// TODO Auto-generated method stub
		Session s1 = HbnUtil.getSession();
		s1.beginTransaction();
		String sql = "select distinct(team) from contact con inner join users u on con.user_id=u.user_id";		
		List<String> conList = s1.createSQLQuery(sql).list();				
		return conList;
	}

	@Override
	public List<User> getAllocatedResourcesTeamWise(int userId, String team)
			throws Exception {
		// TODO Auto-generated method stub

		List<User> userList=new ArrayList<User>();
		try{
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query query = s1.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm, contact con where u.user_id=rm.report_map_id and u.user_id=con.user_id  and (rm.user_id="+userId+" and team='"+team+"') order by u.user_name ");
			Iterator<String[]> it = query.list().iterator();
			while (it.hasNext()){
				User user=new User();
				Object[] obj = (Object[]) it.next();
				Integer userIdTemp=(Integer)obj[0];
				int userIdValue=userIdTemp.intValue();
				user.setUser_Id(userIdValue);
				user.setUser_name((String) obj[1]);
				userList.add(user);
			}
			tx.commit();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return userList;
	}

	@Override
	public String getUserRole(int userId) throws Exception {
		// TODO Auto-generated method stub
		String role = "";
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		Query q1 = s1.createSQLQuery("SELECT role_name FROM role r inner join user_role u on r.role_id=u.role_id where u.user_id="+userId+"");
		List<String> list = q1.list();
		if(!list.isEmpty()){
			role = list.get(0);
		}					
		return role;
	}

	@Override
	public List<Appraisal> getObjective(int user_id, String month) throws Exception {
		// Added for getting Objective for User.
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		List<Appraisal> list = new ArrayList<Appraisal>();
		try{
			String qr = "from Appraisal app where (app.start_date<'"+month+"' and app.end_date>'"+month+"') and user_id="+user_id+"";
			List<Appraisal> objList = s1.createQuery(qr).list();
			Iterator<Appraisal> itr = objList.iterator();
			if(itr.hasNext()) {
				Appraisal objApp =  itr.next();
				if(objApp.getComm_obj()==null){
					objApp.setComm_obj("");
				}
				if(objApp.getSpec_obj()==null){
					objApp.setSpec_obj("");
				}
				list.add(objApp);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		tx.commit();
		s1.close();
		return list;
	}

	@Override
	public List<User> getAllocatedResourcesBasedOnExitDate(int userId, Calendar cal) throws Exception {
		// getting resource list based on exit date.
		List<User> userList=new ArrayList<User>();
		try
		{
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query query = s1.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );
			Iterator<String[]> it = query.list().iterator();
			while (it.hasNext())
			{
				User user=new User();
				Object[] obj = (Object[]) it.next();
				Integer userIdTemp=(Integer)obj[0];
				int userIdValue=userIdTemp.intValue();
				user.setUser_Id(userIdValue);
				user.setUser_name((String) obj[1]);
				Query q1 = s1.createQuery("Select u.exit_date from User u where u.user_Id="+userIdValue+"");
				List<Date> exitList = q1.list();
				if(exitList.get(0)!=null){
					Date exitDate = exitList.get(0);
					Calendar calendar1 = Calendar.getInstance(); // Setting Exit_Date to this Calendar.			
					calendar1.setTime(exitDate);  
					calendar1.set(Calendar.DAY_OF_MONTH, calendar1.getActualMaximum(Calendar.DAY_OF_MONTH));  
					calendar1.set(Calendar.HOUR_OF_DAY, 23);
					calendar1.set(Calendar.MINUTE, 59);
					calendar1.set(Calendar.SECOND, 59);
					if(cal.before(calendar1)){
						userList.add(user);
					}
					else if(cal.equals(calendar1)){						
						userList.add(user);
					}
				}
				else{
					userList.add(user);
				}
			}
			tx.commit();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return userList;
	}

	@Override
	public  List<User> getUserNamesMappedUnderAccountManager() throws Exception {
		// Get all resources under account manager
		List<User> userList=new ArrayList<User>();
		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		List<Object> userObjects = session.createSQLQuery("select u.user_id from users u inner join user_role ur on u.user_id=ur.user_id where ur.role_id=1005 and user_name like '%Hem%'").list();
		if(!userObjects.isEmpty()){
			Iterator<Object> itr = userObjects.listIterator();
			if (itr.hasNext()) {
				int user_id = (Integer)itr.next();
				List<Object[]> listOfResources = session.createSQLQuery("select u.user_name ,u.email from users u inner join report_mapping r on u.user_id=r.report_map_id where r.user_id="+user_id+" order by u.user_name").list();
				if(!listOfResources.isEmpty()){
					Iterator<Object[]> objArray= listOfResources.iterator();
					while (objArray.hasNext()) {
						Object[] objects = (Object[]) objArray.next();
						User u1 = new User();
						u1.setUser_name(objects[0].toString());
						u1.setMail(objects[1].toString());
						userList.add(u1);						
					}
				}

			}
		}		
		else{
			logger.info("Error while retreiving resources mapped under account manager.");	
		}
		tx.commit();
		return userList;
	}

	@Override
	public List<User> getAllocatedResourcesBasedOnExitDateAndLocation(int userId, Calendar cal, String location) throws Exception {
		// Getting mapped resource based on Resource Location.
		List<User> userList=new ArrayList<User>();
		try{
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query query = s1.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm "
					+" where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );

			System.out.println("Printing Query from DAOIMPLE"+query);

			Iterator<String[]> it = query.list().iterator();
			while (it.hasNext()){
				User user=new User();
				Object[] obj = (Object[]) it.next();
				Integer userIdTemp=(Integer)obj[0];
				int userIdValue=userIdTemp.intValue();
				user.setUser_Id(userIdValue);
				user.setUser_name((String) obj[1]);
				Query q1 = s1.createQuery("Select u.exit_date from User u where u.user_Id="+userIdValue+"");
				Query q2 = s1.createSQLQuery("Select location from contact where user_id="+userIdValue+" and location='"+location+"' group by user_id");				
				List<Object> resourceLoc = q2.list();
				List<Date> exitList = q1.list();
				if(exitList.get(0)!=null){
					Date exitDate = exitList.get(0);
					Calendar calendar1 = Calendar.getInstance(); // Setting Exit_Date to this Calendar.			
					calendar1.setTime(exitDate);  
					calendar1.set(Calendar.DAY_OF_MONTH, calendar1.getActualMaximum(Calendar.DAY_OF_MONTH));  
					calendar1.set(Calendar.HOUR_OF_DAY, 23);
					calendar1.set(Calendar.MINUTE, 59);
					calendar1.set(Calendar.SECOND, 59);
					if(!resourceLoc.isEmpty()){
						if(cal.before(calendar1)){
							userList.add(user);
						}
						else if(cal.equals(calendar1)){						
							userList.add(user);
						}
					}
				}
				else{
					if(!resourceLoc.isEmpty()){
						userList.add(user);
					}
				}
			}
			tx.commit();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return userList;
	}
}
