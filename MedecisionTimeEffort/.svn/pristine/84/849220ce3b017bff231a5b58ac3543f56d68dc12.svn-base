package com.calsoft.report.dao;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.calsoft.factory.Factory;
import com.calsoft.report.model.Report;
import com.calsoft.report.model.ReportMapping;
import com.calsoft.task.model.Task;
import com.calsoft.user.dao.UserDao;
import com.calsoft.user.form.UserForm;
import com.calsoft.user.model.User;
import com.calsoft.util.HbnUtil;
import com.calsoft.util.TimeUtility;

public class HbnReportDAO implements ReportDAO {
	private static final Logger logger = Logger.getLogger("name");
	@Override
	public List<Report> getReportData(String year, String month,String[] allocatedResource) throws Exception
	{
		// TODO Auto-generated method stub
		List<Report> reportList = new ArrayList();	
		if(allocatedResource!=null)
		{
			for(int i=0;i<allocatedResource.length;i++)
			{
				//User user=itr.next();
				int userId=Integer.parseInt(allocatedResource[i]);
				//System.out.println("selected user id is:"+userId);
				//get the user name from user id
				UserDao userDao=Factory.getDao();
				User user=userDao.getUsernameFromId(userId);
				String userName=user.getUser_name();
				Session s1 = HbnUtil.getSession();
				Transaction tx = s1.beginTransaction();
				String sql="select u.user_name,SEC_TO_TIME(SUM(TIME_TO_SEC(time))) as time,et.task_date ,et.status  from users u inner  join employee_task_detail et where u.user_id=et.user_id and et.task_date like '"
						+ year
						+ "-"
						+ month
						+ "%"
						+ "'"
						+ " and u.user_id='"+userId+"' group by et.task_date,u.user_id ";				
				Query query1 = s1.createSQLQuery(sql);
				Double totalTime = 0.0;
				List<String[]> queryList1 = query1.list();
				Report report1 = new Report();
				report1.setUserName(userName);
				Iterator<String[]> it = queryList1.iterator();
				List<String> totalSum = new ArrayList<String>();
				while (it.hasNext()) {
					Object[] obj = (Object[]) it.next();
					Date date = (Date) obj[2];
					DateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");
					String formated_date = myFormat.format(date);
					List<String> statusList = s1.createSQLQuery("select status from employee_task_detail where user_id="+userId+" and task_date='"+formated_date+"'").list();

					// Modification
					String timeDB = obj[1].toString().substring(0, obj[1].toString().lastIndexOf(':'));  // Getting Date from DB
					//System.out.println("Geeting timeFormat from DB"+timeDB);
					totalSum.add(obj[1].toString());

					String newTime1 = timeDB.replace(':', '.');
					String newTime2 = newTime1.substring(0, newTime1.length());					
					// Modification
					Double time=Double.parseDouble(newTime2);
					String status =(String)obj[3];
					//System.out.println(obj[3]+"Check000");

					String timeString = null;
					timeString = time.toString();

					String sqlNow = "SELECT * FROM leave_detail where leave_detail.leave_month='"+TimeUtility.getUrsMonth(date)+"' and leave_date="+TimeUtility.getUrsDay(date)+" and leave_detail.user_id="+userId+" ";
					//System.out.println(sqlNow+"sqlNowFromReport");
					List listDate = s1.createSQLQuery(sqlNow).list();
					if(statusList!=null && !statusList.isEmpty()){
						if(!listDate.isEmpty() && statusList.contains("Leave"))
						{
							timeString = time.toString()+" ";
						}
						else if(!listDate.isEmpty() && statusList.contains("Half Day"))
						{
							timeString = time.toString()+"(H) ";
						}
						else if(!listDate.isEmpty() && statusList.contains("Comp off"))
						{
							timeString = time.toString()+"   ";
						}				
						if(statusList.contains("Public holiday"))
						{
							timeString = time.toString()+"  ";
						}	
					}
					report1.setStatus(status);
					if (date.getDate() == 1) {
						report1.setTime1(timeString);
					}
					if (date.getDate() == 2) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime2(timeString);
					}
					if (date.getDate() == 3) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime3(timeString);
					}
					if (date.getDate() == 4) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime4(timeString);
					}
					if (date.getDate() == 5) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime5(timeString);
					}
					if (date.getDate() == 6) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime6(timeString);
					}
					if (date.getDate() == 7) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime7(timeString);
					}
					if (date.getDate() == 8) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime8(timeString);
					}
					if (date.getDate() == 9) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime9(timeString);
					}
					if (date.getDate() == 10) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime10(timeString);
					}
					if (date.getDate() == 11) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime11(timeString);
					}
					if (date.getDate() == 12) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime12(timeString);
					}
					if (date.getDate() == 13) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime13(timeString);
					}
					if (date.getDate() == 14) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime14(timeString);
					}
					if (date.getDate() == 15) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime15(timeString);
					}
					if (date.getDate() == 16) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime16(timeString);
					}
					if (date.getDate() == 17) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime17(timeString);
					}
					if (date.getDate() == 18) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime18(timeString);
					}
					if (date.getDate() == 19) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime19(timeString);
					}
					if (date.getDate() == 20) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime20(timeString);
					}
					if (date.getDate() == 21) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime21(timeString);
					}
					if (date.getDate() == 22) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime22(timeString);
					}
					if (date.getDate() == 23) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime23(timeString);
					}
					if (date.getDate() == 24) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime24(timeString);
					}
					if (date.getDate() == 25) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime25(timeString);
					}
					if (date.getDate() == 26) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime26(timeString);
					}
					if (date.getDate() == 27) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime27(timeString);
					}
					if (date.getDate() == 28) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime28(timeString);
					}
					if (date.getDate() == 29) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime29(timeString);
					}
					if (date.getDate() == 30) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime30(timeString);
					}
					if (date.getDate() == 31) {
						String dateString = new Integer(date.getDate()).toString();
						report1.setTime31(timeString);
					}
				}
				totalTime = TimeUtility.getYourTime(totalSum);
				if(totalSum!=null && !totalSum.isEmpty()&&totalTime>0)
				{
					report1.setTotalTime(totalTime);
				}
				reportList.add(report1);
				tx.commit();
			}
		}
		return reportList;
	}

	@Override
	public List<List<Report>> getUserReportAllocation(int userId) throws Exception {
		// TODO Auto-generated method stub

		List<Report> allocatedList=new ArrayList<Report>();
		List<Report> unallocatedList=new ArrayList<Report>();
		List<List<Report>> combinedList=new ArrayList<List<Report>>();
		String allocatedQueryString="select user_name,user_id  from users where user_id  in( select u.user_id from users u inner join report_mapping rm on u.user_id=rm.report_map_id and rm.user_id="+userId+")"; 
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		Query allocatedQuery = s1.createSQLQuery(allocatedQueryString);
		Iterator it1=allocatedQuery.list().iterator();
		while (it1.hasNext()) {
			Report report=new Report();
			Object[] obj = (Object[]) it1.next();
			String userName=(String)obj[0];
			Integer  userIdValue=(Integer)obj[1];
			int userIdValue1=userIdValue.intValue();
			report.setUserName(userName);
			report.setUserId(userIdValue1);
			allocatedList.add(report);
		}
		String unallocatedQueryString="select user_name,user_id  from users where user_id not in( select u.user_id from users u inner join report_mapping rm on u.user_id=rm.report_map_id and rm.user_id="+userId+")";
		Query unallocatedQuery = s1.createSQLQuery(unallocatedQueryString);
		Iterator it2=unallocatedQuery.list().iterator();
		while (it2.hasNext()) {
			Report report=new Report();
			Object[] obj = (Object[]) it2.next();
			String userName=(String)obj[0];
			Integer  userIdValue=(Integer)obj[1];
			int userIdValue1=userIdValue.intValue();
			report.setUserName(userName);
			report.setUserId(userIdValue1);
			unallocatedList.add(report);
		}
		tx.commit();
		combinedList.add(allocatedList);
		combinedList.add(unallocatedList);
		return combinedList;
	}

	@Override
	public void addResources(String[] allocatedResource,int userId) throws Exception{
		// TODO Auto-generated method stub


		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		if(allocatedResource!=null)
		{
			for(int i=0;i<allocatedResource.length;i++)
			{

				ReportMapping reportmapping=new ReportMapping();
				int mapId=Integer.parseInt(allocatedResource[i]);
				//System.out.println("Allocated resource Id is:------"+mapId);
				reportmapping.setUserId(userId);
				reportmapping.setReportMapId(mapId);
				session.save(reportmapping);
			}
		}
		tx.commit();

	}

	@Override
	public void deleteResources(String[] allocatedResource, int userId)throws Exception {


		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		if(allocatedResource!=null)
		{
			for(int i=0;i<allocatedResource.length;i++)
			{
				//ReportMapping reportmapping=new ReportMapping();
				int mapId=Integer.parseInt(allocatedResource[i]);
				String hql = "delete from ReportMapping rm where rm.userId = " + userId+" and rm.reportMapId="+mapId;
				Query query = session.createQuery(hql);
				query.executeUpdate();
			}
		}
		tx.commit();
	}

	@Override
	public List<List<Report>> getUserReportAllocation() throws Exception {
		// TODO Auto-generated method stub

		List<Report> allocatedList=null;
		List<List<Report>> combinedList=new ArrayList<List<Report>>();

		//get all users allocation details
		//get all user id

		UserDao	dao=Factory.getDao();
		List<User> userList=dao.getUser();
		//logger.info("user  list size inside getUserReportAllocation is:"+userList.size());
		Iterator<User> userIterator=userList.iterator();

		while(userIterator.hasNext())
		{
			User user=userIterator.next();
			String userNameValue=user.getUser_name();
			int userId=user.getUser_Id();
			allocatedList=new ArrayList<Report>();
			String allocatedQueryString="select user_name,user_id  from users where user_id  in( select u.user_id from users u inner join report_mapping rm on u.user_id=rm.report_map_id and rm.user_id="+userId+")"; 
			Session s1 = HbnUtil.getSession();
			Transaction tx = s1.beginTransaction();
			Query allocatedQuery = s1.createSQLQuery(allocatedQueryString);
			Iterator it1=allocatedQuery.list().iterator();
			int count=1;
			while (it1.hasNext()) {
				Report report=new Report();
				Object[] obj = (Object[]) it1.next();
				String userName=(String)obj[0];
				Integer  userIdValue=(Integer)obj[1];
				int userIdValue1=userIdValue.intValue();
				report.setUserName(userName);
				if(count==1)
				{
					report.setParentUserName(userNameValue);
				}
				report.setUserId(userIdValue1);
				allocatedList.add(report);
				count++;
			}
			combinedList.add(allocatedList);
		}
		//logger.info("allocation list size inside getUserReportAllocation is:"+combinedList.size());
		return combinedList;
	}

	@Override
	public List<Report> getReportDataTeamWise(String year, String month, String[] detailedTeam) throws Exception {
		// TODO Auto-generated method stub
		List<Report> reportList = new ArrayList();	
		Session s1 = HbnUtil.getSession();
		if(detailedTeam!=null){
			for(int i=0;i<detailedTeam.length;i++){
				Query q1 = s1.createSQLQuery("select distinct(con.user_id) from contact as con where con.team='"+detailedTeam[i]+"'");
				List<Integer> user_list = q1.list();
				Iterator<Integer> itr = user_list.iterator();
				while(itr.hasNext()){
					int user_id = itr.next();
					UserDao userDao=Factory.getDao();
					User user=userDao.getUsernameFromId(user_id);
					if(user!=null){
						String userName=user.getUser_name();
						Transaction tx = s1.beginTransaction();
						String sql="select u.user_name,SEC_TO_TIME(SUM(TIME_TO_SEC(time))) as time,et.task_date ,et.status  from users u inner  join employee_task_detail et where u.user_id=et.user_id and et.task_date like '"
								+ year
								+ "-"
								+ month
								+ "%"
								+ "'"
								+ " and u.user_id='"+user_id+"' group by et.task_date,u.user_id ";
						Query query1 = s1.createSQLQuery(sql);
						Double totalTime = 0.0;
						List<String[]> queryList1 = query1.list();
						Report report1 = new Report();
						report1.setUserName(userName);
						Iterator<String[]> it = queryList1.iterator();
						List<String> totalSum = new ArrayList<String>();
						while (it.hasNext()) {
							Object[] obj = (Object[]) it.next();
							Date date = (Date) obj[2];
							DateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");
							String formated_date = myFormat.format(date);
							List<String> statusList = s1.createSQLQuery("select status from employee_task_detail where user_id="+user_id+" and task_date='"+formated_date+"'").list();														
							String timeDB = obj[1].toString().substring(0, obj[1].toString().lastIndexOf(':'));  // Getting Date from DB
							totalSum.add(obj[1].toString());
							String newTime1 = timeDB.replace(':', '.');
							String newTime2 = newTime1.substring(0, newTime1.length());					
							Double time=Double.parseDouble(newTime2);
							String status =(String)obj[3];
							String timeString = null;
							timeString = time.toString();
							String sqlNow = "SELECT * FROM leave_detail where leave_detail.leave_month='"+TimeUtility.getUrsMonth(date)+"' and leave_date="+TimeUtility.getUrsDay(date)+" and leave_detail.user_id="+user_id+" ";
							List listDate = s1.createSQLQuery(sqlNow).list();
							if(statusList!=null && !statusList.isEmpty()){
								if(!listDate.isEmpty() && statusList.contains("Leave"))
								{
									timeString = time.toString()+" ";
								}
								else if(!listDate.isEmpty() && statusList.contains("Half Day"))
								{
									timeString = time.toString()+"(H) ";
								}
								else if(!listDate.isEmpty() && statusList.contains("Comp off"))
								{
									timeString = time.toString()+"   ";
								}				
								if(statusList.contains("Public holiday"))
								{
									timeString = time.toString()+"  ";
								}	
							}
							report1.setStatus(status);
							if (date.getDate() == 1) {
								report1.setTime1(timeString);
							}
							if (date.getDate() == 2) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime2(timeString);
							}
							if (date.getDate() == 3) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime3(timeString);
							}
							if (date.getDate() == 4) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime4(timeString);
							}
							if (date.getDate() == 5) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime5(timeString);
							}
							if (date.getDate() == 6) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime6(timeString);
							}
							if (date.getDate() == 7) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime7(timeString);
							}
							if (date.getDate() == 8) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime8(timeString);
							}
							if (date.getDate() == 9) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime9(timeString);
							}
							if (date.getDate() == 10) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime10(timeString);
							}
							if (date.getDate() == 11) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime11(timeString);
							}
							if (date.getDate() == 12) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime12(timeString);
							}
							if (date.getDate() == 13) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime13(timeString);
							}
							if (date.getDate() == 14) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime14(timeString);
							}
							if (date.getDate() == 15) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime15(timeString);
							}
							if (date.getDate() == 16) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime16(timeString);
							}
							if (date.getDate() == 17) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime17(timeString);
							}
							if (date.getDate() == 18) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime18(timeString);
							}
							if (date.getDate() == 19) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime19(timeString);
							}
							if (date.getDate() == 20) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime20(timeString);
							}
							if (date.getDate() == 21) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime21(timeString);
							}
							if (date.getDate() == 22) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime22(timeString);
							}
							if (date.getDate() == 23) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime23(timeString);
							}
							if (date.getDate() == 24) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime24(timeString);
							}
							if (date.getDate() == 25) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime25(timeString);
							}
							if (date.getDate() == 26) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime26(timeString);
							}
							if (date.getDate() == 27) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime27(timeString);
							}
							if (date.getDate() == 28) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime28(timeString);
							}
							if (date.getDate() == 29) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime29(timeString);
							}
							if (date.getDate() == 30) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime30(timeString);
							}
							if (date.getDate() == 31) {
								String dateString = new Integer(date.getDate()).toString();
								report1.setTime31(timeString);
							}
						}
						totalTime = TimeUtility.getYourTime(totalSum);
						if(totalSum!=null && !totalSum.isEmpty()&&totalTime>0)
						{
							report1.setTotalTime(totalTime);
						}
						reportList.add(report1);
						tx.commit();
					}
				}
			}
		}
		return reportList;
	}

	@Override
	public List<Report> getExceptionDashboard(String year, String month, List<User> allocatedUserList) throws Exception {
		List<Report> reportList = new ArrayList();	
		if(allocatedUserList!=null)
		{
			Session s1 = HbnUtil.getSession();
			Iterator<User> it  = allocatedUserList.iterator();
			while (it.hasNext()) {
				User us = (User) it.next();
				//User user=itr.next();
				int userId=us.getUser_Id();
				//System.out.println("selected user id is:"+userId);
				//get the user name from user id
				UserDao userDao=Factory.getDao();
				User user=userDao.getUsernameFromId(userId);
				String userName=user.getUser_name();
				Transaction tx = s1.beginTransaction();
				String sql="select u.user_name,SEC_TO_TIME(SUM(TIME_TO_SEC(time))) as time,et.task_date ,et.status  from users u inner  join employee_task_detail et where u.user_id=et.user_id and et.task_date like '"
						+ year
						+ "-"
						+ month
						+ "%"
						+ "'"
						+ " and u.user_id='"+userId+"' group by et.task_date,u.user_id ";
				Query query1 = s1.createSQLQuery(sql);
				List<Object[]> list = query1.list();
				Report r1 = new Report();
				boolean myChecker = false;
				if(list.isEmpty()){
					r1.setUserName(userName);
					reportList.add(r1);       		// Adding Resource not having a Single entry
				}else if(!list.isEmpty()){
					for (Object[] obj : list) {
						String timeDB = obj[1].toString().substring(0, obj[1].toString().lastIndexOf(':'));  // Getting Date from DB
						String newTime1 = timeDB.replace(':', '.');
						String newTime2 = newTime1.substring(0, newTime1.length());					
						Double timeCheck=Double.parseDouble(newTime2);
						if(timeCheck<8){
							myChecker = true;
							break;
						}
					}
					if(myChecker){
						r1.setUserName(userName);
						Iterator<Object[]> myItr = list.iterator();
						while (myItr.hasNext()) {
							Object[] listObj = (Object[]) myItr.next();
							Date date = (Date) listObj[2];
							String timeDb = listObj[1].toString().substring(0, listObj[1].toString().lastIndexOf(':'));  // Getting Date from DB
							String new_Time1 = timeDb.replace(':', '.');
							String new_Time2 = new_Time1.substring(0, new_Time1.length());					
							Double time=Double.parseDouble(new_Time2);
							if(time<8){
								String timeString = null;
								timeString = time.toString();
								if (date.getDate() == 1) {
									r1.setTime1(timeString);
								}
								if (date.getDate() == 2) {
									r1.setTime2(timeString);
								}
								if (date.getDate() == 3) {
									r1.setTime3(timeString);
								}
								if (date.getDate() == 4) {
									r1.setTime4(timeString);
								}
								if (date.getDate() == 5) {
									r1.setTime5(timeString);
								}
								if (date.getDate() == 6) {
									r1.setTime6(timeString);
								}
								if (date.getDate() == 7) {
									r1.setTime7(timeString);
								}
								if (date.getDate() == 8) {
									r1.setTime8(timeString);
								}
								if (date.getDate() == 9) {
									r1.setTime9(timeString);
								}
								if (date.getDate() == 10) {
									r1.setTime10(timeString);
								}
								if (date.getDate() == 11) {
									r1.setTime11(timeString);
								}
								if (date.getDate() == 12) {
									r1.setTime12(timeString);
								}
								if (date.getDate() == 13) {
									r1.setTime13(timeString);
								}
								if (date.getDate() == 14) {
									r1.setTime14(timeString);
								}
								if (date.getDate() == 15) {
									r1.setTime15(timeString);
								}
								if (date.getDate() == 16) {
									r1.setTime16(timeString);
								}
								if (date.getDate() == 17) {
									r1.setTime17(timeString);
								}
								if (date.getDate() == 18) {
									r1.setTime18(timeString);
								}
								if (date.getDate() == 19) {
									r1.setTime19(timeString);
								}
								if (date.getDate() == 20) {
									r1.setTime20(timeString);
								}
								if (date.getDate() == 21) {
									r1.setTime21(timeString);
								}
								if (date.getDate() == 22) {
									r1.setTime22(timeString);
								}
								if (date.getDate() == 23) {
									r1.setTime23(timeString);
								}
								if (date.getDate() == 24) {

									r1.setTime24(timeString);
								}
								if (date.getDate() == 25) {
									r1.setTime25(timeString);
								}
								if (date.getDate() == 26) {
									r1.setTime26(timeString);
								}
								if (date.getDate() == 27) {
									r1.setTime27(timeString);
								}
								if (date.getDate() == 28) {
									r1.setTime28(timeString);
								}
								if (date.getDate() == 29) {
									r1.setTime29(timeString);
								}
								if (date.getDate() == 30) {
									r1.setTime30(timeString);
								}
								if (date.getDate() == 31) {
									r1.setTime31(timeString);
								}
							} // Closing for if time<8						
							else{
								String timeString = "k";
								if (date.getDate() == 1) {
									r1.setTime1(timeString);
								}
								if (date.getDate() == 2) {
									r1.setTime2(timeString);
								}
								if (date.getDate() == 3) {
									r1.setTime3(timeString);
								}
								if (date.getDate() == 4) {
									r1.setTime4(timeString);
								}
								if (date.getDate() == 5) {
									r1.setTime5(timeString);
								}
								if (date.getDate() == 6) {
									r1.setTime6(timeString);
								}
								if (date.getDate() == 7) {
									r1.setTime7(timeString);
								}
								if (date.getDate() == 8) {
									r1.setTime8(timeString);
								}
								if (date.getDate() == 9) {
									r1.setTime9(timeString);
								}
								if (date.getDate() == 10) {
									r1.setTime10(timeString);
								}
								if (date.getDate() == 11) {
									r1.setTime11(timeString);
								}
								if (date.getDate() == 12) {
									r1.setTime12(timeString);
								}
								if (date.getDate() == 13) {
									r1.setTime13(timeString);
								}
								if (date.getDate() == 14) {
									r1.setTime14(timeString);
								}
								if (date.getDate() == 15) {
									r1.setTime15(timeString);
								}
								if (date.getDate() == 16) {
									r1.setTime16(timeString);
								}
								if (date.getDate() == 17) {
									r1.setTime17(timeString);
								}
								if (date.getDate() == 18) {
									r1.setTime18(timeString);
								}
								if (date.getDate() == 19) {
									r1.setTime19(timeString);
								}
								if (date.getDate() == 20) {
									r1.setTime20(timeString);
								}
								if (date.getDate() == 21) {
									r1.setTime21(timeString);
								}
								if (date.getDate() == 22) {
									r1.setTime22(timeString);
								}
								if (date.getDate() == 23) {
									r1.setTime23(timeString);
								}
								if (date.getDate() == 24) {

									r1.setTime24(timeString);
								}
								if (date.getDate() == 25) {
									r1.setTime25(timeString);
								}
								if (date.getDate() == 26) {
									r1.setTime26(timeString);
								}
								if (date.getDate() == 27) {
									r1.setTime27(timeString);
								}
								if (date.getDate() == 28) {
									r1.setTime28(timeString);
								}
								if (date.getDate() == 29) {
									r1.setTime29(timeString);
								}
								if (date.getDate() == 30) {
									r1.setTime30(timeString);
								}
								if (date.getDate() == 31) {
									r1.setTime31(timeString);
								}
							} // Closing for else

						}	// Closing for While
						reportList.add(r1);
					}
				}
				tx.commit();
			}
			s1.close();
		}
		return reportList;
	}
	@Override
	public List<Report> getReportDataForRemainderMail(String monthYear, List<UserForm> allocatedUserList) throws Exception {		
		List<Report> reportData = new ArrayList<Report>();
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		UserDao userDao=Factory.getDao();
		for (UserForm u_form : allocatedUserList) {
			int user_id = u_form.getUserId();
			User user=userDao.getUsernameFromId(user_id);
			String userName=user.getUser_name();
			String sql = "select u.user_name,SEC_TO_TIME(SUM(TIME_TO_SEC(time))) as time,et.task_date ,et.status  from users u inner  join employee_task_detail et "
					+"where u.user_id=et.user_id and et.task_date like '%"+monthYear+"%' and u.user_id="+user_id+" group by et.task_date,u.user_id ";
			Query query1 = s1.createSQLQuery(sql);
			Double totalTime = 0.0;
			List<String[]> queryList1 = query1.list();
			Report report1 = new Report();
			report1.setUserName(userName);
			Iterator<String[]> it = queryList1.iterator();
			List<String> totalSum = new ArrayList<String>();
			while (it.hasNext()){
				Object[] obj = (Object[]) it.next();
				Date date = (Date) obj[2];
				DateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd");
				String formated_date = myFormat.format(date);
				List<String> statusList = s1.createSQLQuery("select status from employee_task_detail where user_id="+user_id+" and task_date='"+formated_date+"'").list();
				// Modification
				String timeDB = obj[1].toString().substring(0, obj[1].toString().lastIndexOf(':'));  // Getting Time from DB
				totalSum.add(obj[1].toString());
				String newTime1 = timeDB.replace(':', '.');
				String newTime2 = newTime1.substring(0, newTime1.length());					
				// Modification
				Double time=Double.parseDouble(newTime2);
				String status =(String)obj[3];
				//System.out.println(obj[3]+"Check000");
				String timeString = null;
				timeString = time.toString();
				String sqlNow = "SELECT * FROM leave_detail where leave_detail.leave_month='"+TimeUtility.getUrsMonth(date)+"' and leave_date="+TimeUtility.getUrsDay(date)+" and leave_detail.user_id="+user_id+" ";
				//System.out.println(sqlNow+"sqlNowFromReport");
				List listDate = s1.createSQLQuery(sqlNow).list();
				if(statusList!=null && !statusList.isEmpty()){
					if(!listDate.isEmpty() && statusList.contains("Leave")){
						timeString = time.toString()+" ";
					}
					else if(!listDate.isEmpty() && statusList.contains("Half Day")){
						timeString = time.toString()+"(H) ";
					}
					else if(!listDate.isEmpty() && statusList.contains("Comp off")){
						timeString = time.toString()+"   ";
					}				
					if(statusList.contains("Public holiday")){
						timeString = time.toString()+"  ";
					}	
				}
				report1.setStatus(status);
				if (date.getDate() == 1) {
					report1.setTime1(timeString);
				}
				if (date.getDate() == 2) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime2(timeString);
				}
				if (date.getDate() == 3) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime3(timeString);
				}
				if (date.getDate() == 4) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime4(timeString);
				}
				if (date.getDate() == 5) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime5(timeString);
				}
				if (date.getDate() == 6) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime6(timeString);
				}
				if (date.getDate() == 7) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime7(timeString);
				}
				if (date.getDate() == 8) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime8(timeString);
				}
				if (date.getDate() == 9) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime9(timeString);
				}
				if (date.getDate() == 10) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime10(timeString);
				}
				if (date.getDate() == 11) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime11(timeString);
				}
				if (date.getDate() == 12) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime12(timeString);
				}
				if (date.getDate() == 13) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime13(timeString);
				}
				if (date.getDate() == 14) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime14(timeString);
				}
				if (date.getDate() == 15) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime15(timeString);
				}
				if (date.getDate() == 16) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime16(timeString);
				}
				if (date.getDate() == 17) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime17(timeString);
				}
				if (date.getDate() == 18) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime18(timeString);
				}
				if (date.getDate() == 19) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime19(timeString);
				}
				if (date.getDate() == 20) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime20(timeString);
				}
				if (date.getDate() == 21) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime21(timeString);
				}
				if (date.getDate() == 22) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime22(timeString);
				}
				if (date.getDate() == 23) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime23(timeString);
				}
				if (date.getDate() == 24) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime24(timeString);
				}
				if (date.getDate() == 25) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime25(timeString);
				}
				if (date.getDate() == 26) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime26(timeString);
				}
				if (date.getDate() == 27) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime27(timeString);
				}
				if (date.getDate() == 28) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime28(timeString);
				}
				if (date.getDate() == 29) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime29(timeString);
				}
				if (date.getDate() == 30) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime30(timeString);
				}
				if (date.getDate() == 31) {
					String dateString = new Integer(date.getDate()).toString();
					report1.setTime31(timeString);
				}
			}
			totalTime = TimeUtility.getYourTime(totalSum);
			if(totalSum!=null && !totalSum.isEmpty()&&totalTime>0)
			{
				report1.setTotalTime(totalTime);
			}
			else{
				report1.setTotalTime(0.0);
			}
			reportData.add(report1);			
		}
		tx.commit();
		return reportData;
	}

	@Override
	public List<Report> getDefaulterListDetails(String[] allocatedResource, List<String> getAllDatesForPreviousWeek) throws Exception {
		// Getting defaulter list details for previous week
		List<Report> defaulterList = new ArrayList<Report>();
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat df2 = new SimpleDateFormat("dd");
		try{
			for (String userId : allocatedResource) {
				String single_date = "";
				String getYearAndMonth = "";
				if(!getAllDatesForPreviousWeek.isEmpty()){
					String dateFromList = getAllDatesForPreviousWeek.get(0);
					getYearAndMonth = dateFromList.substring(0, dateFromList.lastIndexOf('-'));
				}
				List<Task> listForWholeMonthEntry = s1.createQuery("from Task t where user_id="+userId+" and t.task_date like '%"+getYearAndMonth+"%'").list();
				if(listForWholeMonthEntry.isEmpty()){
					single_date = "No entry found.";
				}
				else{
					for (String date : getAllDatesForPreviousWeek) {
						List<Task> taskList = s1.createQuery("from Task t where user_id="+userId+" and t.task_date='"+date+"'").list();
						if(taskList.isEmpty()){	
							String formatted_date = "";
							Date date_val = df1.parse(date);
							formatted_date = df2.format(date_val);					
							if(single_date == ""){
								single_date = single_date+""+formatted_date;
							}
							else{
								single_date = single_date+", "+formatted_date;
							}
						}
					}
				}
				if(single_date!=""){
					List<User> u_list = s1.createQuery("from User u where u.user_Id="+userId).list();
					User u1 = u_list.get(0);
					Report r1 = new Report();
					if(!single_date.equalsIgnoreCase("No entry found."))
						single_date = TimeUtility.getFormattedDateWithRange(single_date);
					r1.setPeriod(single_date);
					r1.setUserName(u1.getUser_name());
					defaulterList.add(r1);
				}
			}	
			tx.commit();
			s1.close();
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception();
		}
		return defaulterList;
	}

	@Override
	public List<Report> getResourceDetailWhoMissedEntry(List<User> allocatedUserList, List<String> allWorkingDatesForThisMonth, Properties props) throws Exception {
		// For sending missing time entry mail for current month.
		List<Report> defaulterListForMailing = new ArrayList<Report>();
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat df2 = new SimpleDateFormat("dd");
		DateFormat df3 = new SimpleDateFormat("MMMM d, yyyy");
		int userId_for_accountManager = Integer.parseInt(props.getProperty("account_manager_userId"));
		int userId_for_admin = Integer.parseInt(props.getProperty("userInfo_userId"));
		try{
			for (User u : allocatedUserList) {
				int user_id = u.getUser_Id();
				if(user_id!= userId_for_accountManager && user_id!= userId_for_admin){
					String single_date = "";
					String getYearAndMonth = "";
					String startDateFromList = allWorkingDatesForThisMonth.get(0);
					String endDate = allWorkingDatesForThisMonth.get(allWorkingDatesForThisMonth.size()-1);
					getYearAndMonth = startDateFromList.substring(0, startDateFromList.lastIndexOf('-'));
					List<Task> listForWholeMonthEntry = s1.createQuery("from Task et where user_id="+user_id+" and  et.task_date BETWEEN '"+startDateFromList+"' AND '"+endDate+"'").list();
					if(listForWholeMonthEntry.isEmpty()){
						Date formatted_date = df1.parse(startDateFromList);
						startDateFromList = df3.format(formatted_date);
						single_date = "from "+startDateFromList+" till date.";
					}
					else{
						for (String date : allWorkingDatesForThisMonth) {
							List<Task> taskList = s1.createQuery("from Task t where user_id="+user_id+" and t.task_date='"+date+"'").list();
							if(taskList.isEmpty()){	
								String formatted_date = "";
								Date date_val = df1.parse(date);
								formatted_date = df2.format(date_val);					
								if(single_date == ""){
									single_date = single_date+""+formatted_date;
								}
								else{
									single_date = single_date+", "+formatted_date;
								}
							}
						}
					}
					if(single_date!=""){
						List<User> u_list = s1.createQuery("from User u where u.user_Id="+user_id).list();
						User u1 = u_list.get(0);
						Report r1 = new Report();
						if(!single_date.contains("from")){
							single_date = TimeUtility.getFormattedDateWithRangeForReminderMailFormat(single_date);
							r1.setPeriod("for "+single_date); // Modifing period for mailing
						}
						else{
							r1.setPeriod(single_date);
						}
						r1.setUserId(user_id);
						r1.setUserName(u1.getUser_name());
						r1.setEmailId(u1.getMail());
						defaulterListForMailing.add(r1);
					}
				}
			}	
			tx.commit();
			s1.close();
		} catch (Exception e) {
			logger.error("Exception occured from DAO while getting time entry status list "+e);
			throw new Exception();
		}
		return defaulterListForMailing;
	}

	@Override
	public List<String> getAllLeadDetailForMailing(int user_id, Properties props)throws Exception {
		// For retrieving all lead details 
		List<String> leadListInfo = new ArrayList<String>();
		Integer devManager_id = Integer.parseInt(props.getProperty("dev_manager_id"));
		Integer admin_id = Integer.parseInt(props.getProperty("userInfo_userId"));
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();		
		Query q1 = s1.createSQLQuery("select u.user_name,u.user_id,u.email from users u where u.user_id"+
				" in(select user_id from report_mapping rm where rm.report_map_id="+user_id+" and rm.user_id!="+user_id+") order by u.user_name");
		List<Object[]> leadList = q1.list();
		if(leadList!=null && !leadList.isEmpty()){
			for (Iterator<Object[]> iterator = leadList.iterator(); iterator.hasNext();) {
				Object[] objArray = (Object[]) iterator.next();
				int userIdCheck = (Integer)objArray[1];  // Getting userId value from object array
				if(userIdCheck!=0){
					List<Object> userRoleStatus = s1.createSQLQuery("select r.role_id from role r inner join user_role ur on r.role_id=ur.role_id where ur.user_id="+userIdCheck+"").list();
					if(userRoleStatus!=null && !userRoleStatus.isEmpty()){
						List<User> u_list = s1.createQuery("from User u where u.user_Id="+userIdCheck).list();
						User u1 = u_list.get(0);
						String userEmail = u1.getMail();
						String role_id = (String) userRoleStatus.get(0);									
						if((role_id.equals("1002") &&  (userIdCheck!= admin_id && userEmail.contains("calsoftlabs.com"))) || (role_id.equals("1004") && userIdCheck== devManager_id)){
							leadListInfo.add(objArray[2].toString());
						}
					}
				}
			}
		}					
		tx.commit();
		s1.close();
		return leadListInfo;
	}

	/*@Override
	public String saveWeeklyStatus(UserEvent userEvent) throws Exception{
		// TODO Auto-generated method stub

		String message = "Form saved successfully for";
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		try
		{			
			Set<EventMile> eventMile = userEvent.getEventMile();
			Set<EventConst> eventConst = userEvent.getEventConst();
			Set<EventRole> eventRoles = userEvent.getEventRole();								
			s1.save(userEvent);
			for (EventMile m1 : eventMile) {
				s1.save(m1);
			}
			for (EventConst c1 : eventConst) {
				s1.save(c1);
			}
			for (EventRole r1 : eventRoles) {
				s1.save(r1);
			}
			s1.flush();
			tx.commit();
			s1.close();

		}
		catch (Exception e) {
			message = "Form not saved";
		}
		return message;
	}

	/*@Override
	public String saveWeeklyStatus(UserEvent userEvent) throws Exception{
		// TODO Auto-generated method stub

		String message = "Form saved successfully for";
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		try
		{			
			Set<EventMile> eventMile = userEvent.getEventMile();
			Set<EventConst> eventConst = userEvent.getEventConst();
			Set<EventRole> eventRoles = userEvent.getEventRole();								
			s1.save(userEvent);
			for (EventMile m1 : eventMile) {
				s1.save(m1);
			}
			for (EventConst c1 : eventConst) {
				s1.save(c1);
			}
			for (EventRole r1 : eventRoles) {
				s1.save(r1);
			}
			s1.flush();
			tx.commit();
			s1.close();

		}
		catch (Exception e) {
			message = "Form not saved";
		}
		return message;
	}

	@Override
	public UserEvent getEditableWeeklyForm(UserEvent userEvent)throws Exception {
		// TODO Auto-generated method stub
		UserEvent userEventFromDB = null;
		Session s1 = HbnUtil.getSession();
		Transaction tx = s1.beginTransaction();
		String hqlQuery = "select Max(usEv.id) from UserEvent usEv where(usEv.start_date='"+userEvent.getStart_date()+"' and usEv.end_date='"+userEvent.getEnd_date()+"' and user_id="+userEvent.getUser().getUser_Id()+")";
		List<Integer> listId = s1.createQuery(hqlQuery).list();
		List<UserEvent> listUserEvent = null;
		if(listId!= null && !listId.isEmpty() &&  listId.get(0)!=null)
		{
			//userEventFromDB.setId(listId.get(0));
			int event_id = listId.get(0);
			listUserEvent = s1.createQuery("from UserEvent userEvent where userEvent.id="+event_id+"").list();
			if(listUserEvent!= null && !listUserEvent.isEmpty() &&  listUserEvent.get(0)!=null){
			   userEventFromDB = listUserEvent.get(0);
			}
			List<EventMile> listMile = s1.createQuery("from EventMile eventMile where id_event="+event_id+"").list();
			List<EventConst> listConst = s1.createQuery("from EventConst eventConst where event_id="+event_id+"").list();
			List<EventRole> listRole = s1.createQuery("from EventRole eventRole where event_id="+event_id+"").list();
			Set<EventMile> setMile = new HashSet<EventMile>();
			Set<EventConst> setConst = new HashSet<EventConst>();
			Set<EventRole>  setRole = new HashSet<EventRole>();
			for (EventMile eventMile : listMile) {
				setMile.add(eventMile);
			}
			for (EventConst eventConst : listConst) {
				setConst.add(eventConst);
			}
			for (EventRole eventRole : listRole) {
				setRole.add(eventRole);
			}			
			userEventFromDB.setEventMile(setMile);
			userEventFromDB.setEventConst(setConst);
			userEventFromDB.setEventRole(setRole);
		}

		return userEventFromDB;
	}*/


}
