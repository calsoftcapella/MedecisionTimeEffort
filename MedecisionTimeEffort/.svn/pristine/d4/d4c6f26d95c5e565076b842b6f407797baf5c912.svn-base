package com.calsoft.performance.dao;

import java.util.Date;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import org.apache.log4j.Logger;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.calsoft.performance.form.PerformanceLogForm;
import com.calsoft.performance.form.UserCommentForm;
import com.calsoft.performance.model.UserComment;
import com.calsoft.user.form.UserForm;
import com.calsoft.user.model.Appraisal;
import com.calsoft.user.model.User;
import com.calsoft.util.HbnUtil;


public class PerformanceLogDaoImpl implements PerformanceLogDao {
	private static final Logger logger = Logger.getLogger("PerformanceLogDaoImpl");
	@Override
	public  Appraisal getPerformance(int userId ,String period) throws Exception
	{
		String startDate =null;
		String endDate =null;
		Date convertedStartDate= null;
		Date convertedEndDate=null;
		Calendar calendar = null;
		String appraisalStartDate=null;
		String appraisalEndDate=null;
		SimpleDateFormat sm = new SimpleDateFormat("MMM-yyyy");
		if(period!=null && period!=""){
			String[] allString = period.split(" to ");
			startDate = allString[0];//+"-"+allString[2];
			endDate = allString[1];//+"-"+allString[2];
			//String[] startDateYear=startDate.split("-");
			String[] endDateYear=endDate.split("-");

			convertedStartDate=sm.parse(startDate);	
			convertedEndDate=sm.parse(endDate);	
			SimpleDateFormat sm2 = new SimpleDateFormat("yyyy-MM-dd");
			appraisalStartDate=sm2.format(convertedStartDate);
			calendar = new GregorianCalendar(Integer.parseInt(endDateYear[1]),convertedEndDate.getMonth()  , Calendar.DAY_OF_MONTH);
			calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
			appraisalEndDate=sm2.format(calendar.getTime());
		}		
		Appraisal userperformance=new Appraisal();
		List<Appraisal> performancelist =new ArrayList<Appraisal>();
		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		performancelist = session.createQuery("FROM Appraisal app where user_id = "+userId+" AND app.start_date = '"+appraisalStartDate+"' AND app.end_date ='"+appraisalEndDate +"'").list();
		if(performancelist.size()==0)
		{
			userperformance.setComm_obj("Not given for this period to this user.");
			userperformance.setSpec_obj("Not given for this period to this user.");
		}
		else{
			Iterator<Appraisal> itr = performancelist.iterator();
			while(itr.hasNext()) {
				userperformance	=itr.next();
			}

			tx.commit();
		}
		User u1 = new User();
		u1.setUser_Id(userId);
		userperformance.setUser(u1);
		return userperformance;
	}

	/*Not using this method for getting period list .
	 */
	@Override
	public List<String> getPeriodListForUser(int userId) {
		List<String> periodList=new ArrayList<String>();
		Session session = HbnUtil.getSession();
		Transaction tx = session.beginTransaction();
		try{
		List<Date> statusObjects= session.createQuery("select distinct(start_date)  FROM Appraisal ").list();
		List<Date> statusObjects2= session.createQuery("select distinct(end_date) FROM Appraisal ").list();
		Iterator<Date> itr = statusObjects.iterator();
		Iterator<Date> itr2 = statusObjects2.iterator();
		while(itr.hasNext()) {
			Date date=itr.next();
			Date date2=itr2.next();
			DateFormat df = new SimpleDateFormat("yyyy");
			String dt =df.format(date2);
			int startDate=date.getMonth();
			int endDate=date2.getMonth();
			String startDateName=getMonth(startDate);
			String endDateName=getMonth(endDate);
			String period=startDateName.substring(0, 3)+"-"+endDateName.substring(0, 3)+" "+dt;
			periodList.add(period.trim());
		}
		tx.commit();
		return periodList;}
		catch(Exception e){
			logger.error("Exception raised in getPeriodListForUser");
			e.printStackTrace();
			return null;
			
		}
	}

	public String getMonth(int month) {
		return new DateFormatSymbols().getMonths()[month];
	}

	@Override
	public String accountManager(PerformanceLogForm performanceLogForm,int userId , int id){
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		List<String> query = session.createSQLQuery("SELECT user_name FROM users where user_id in " +
				"(SELECT user_id FROM user_role where role_id=1005 and user_id in" +
				" (SELECT user_id FROM report_mapping where report_map_id="+performanceLogForm.getUserId()+"))" ).list();
		String acc_Manager="notAssigned";
	if(query.size()!=0)
		acc_Manager=query.get(0);
	transaction.commit();
		return acc_Manager;
	}
	@Override
	public boolean saveUserComment(PerformanceLogForm performanceLogForm,int userId , int id) {
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		if(performanceLogForm!=null){
			try{

				if(performanceLogForm.getRoleNames()!=null){
					String[] accessusers=performanceLogForm.getRoleNames();
					List<String> query = session.createSQLQuery("SELECT user_name FROM users where user_id in " +
							"(SELECT user_id FROM user_role where role_id=1005 and user_id in" +
							" (SELECT user_id FROM report_mapping where report_map_id="+performanceLogForm.getUserId()+"))" ).list();
				
					String acc_ManagerMatch="notAssigned";
					if(query.size()>=1){
						acc_ManagerMatch=query.get(0);}
					
					query.clear();


					query = session.createSQLQuery("SELECT user_name FROM users where user_id in " +
							"(SELECT user_id FROM user_role where role_id=1004 and user_id in" +
							" (SELECT user_id FROM report_mapping where report_map_id="+performanceLogForm.getUserId()+"))" ).list();
					String managerMatch="notAssigned";
					if(query.size()>=1){
					 managerMatch=query.get(0);}
					
					
					query.clear();


					query = session.createSQLQuery("SELECT user_name FROM users where user_id in " +
							"(SELECT user_id FROM user_role where role_id=1003 and user_id in" +
							" (SELECT user_id FROM report_mapping where report_map_id="+performanceLogForm.getUserId()+"))" ).list();
					
					String clientMatch="notAssigned";
					if(query.size()>=1){
						clientMatch=query.get(0);}
					System.out.println("Account Manager, Manager and Client Manager names are "+acc_ManagerMatch+" "+managerMatch+" "+clientMatch);
					query.clear();

					query = session.createQuery("select user_name FROM User where user_Id = "+performanceLogForm.getUserId()).list();
					String performanceUser=query.get(0);
					query.clear();

					int users=accessusers.length;

					String acc_Manager="no";
					String client="no"; 
					String manager="no";
					String user="no";

					for(int i=0;i<users;i++){

						if(accessusers[i].trim().equalsIgnoreCase(managerMatch.trim()))
						{
							manager=accessusers[i];	
						}
						else if(accessusers[i].trim().equalsIgnoreCase(clientMatch.trim()))
						{
							client=accessusers[i];	
						}else if(accessusers[i].trim().equalsIgnoreCase(performanceUser.trim()))
						{
							user=accessusers[i];
						}
						else if(accessusers[i].trim().equalsIgnoreCase(acc_ManagerMatch.trim()))
						{
							acc_Manager=accessusers[i];
						}

					}
					String comment=performanceLogForm.getUserComments();
					if(comment==null||comment.isEmpty()){
						return false;	
					}
					else{

						java.util.Date today = new java.util.Date();
						java.sql.Date sqlToday = new java.sql.Date(today.getTime());
						SimpleDateFormat sm2 = new SimpleDateFormat("MM-dd-yyyy");
						String commentDate=sm2.format(sqlToday);
						List<Appraisal> statusObjects= session.createQuery(" FROM Appraisal where id="+id).list(); 
						List<String> userName = session.createQuery("select user_name FROM User where user_Id = "+userId).list();
						String name=userName.get(0);
						Appraisal performancelog = statusObjects.get(0);
						UserComment comments=new UserComment();
						comments.setDate(commentDate);
						comments.setUser_Name(name);
						comments.setUser_Comment(comment);
						comments.setAppraisal(performancelog);
						comments.setClient(client);
						comments.setManager(manager);
						comments.setAccountManager(acc_Manager);
						comments.setUser(user);
						session.save(comments);
						transaction.commit();
						return true;
					}
				}
			}
			catch (HibernateException e) {
				transaction.rollback();
				e.printStackTrace();
				return false; 
			}
		}
		return false;
	}

	@Override
	public boolean editUserComment(int commentId, String userComment) {
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		try{
			java.util.Date today = new java.util.Date();
			java.sql.Date sqlToday = new java.sql.Date(today.getTime());
			SimpleDateFormat sm2 = new SimpleDateFormat("MM-dd-yyyy");
			String commentDate=sm2.format(sqlToday);
			List<UserComment> commentEdit= session.createQuery(" FROM UserComment where commentId="+commentId).list();
			UserComment updatedcomments =commentEdit.get(0);
			updatedcomments.setUser_Comment(userComment);
			updatedcomments.setDate(commentDate);
			session.save(updatedcomments);
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			logger.error("exception raised in editing user comment ");	
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<UserCommentForm> getComments(int id,int userId) {
		List<UserCommentForm>  commentList = new ArrayList<UserCommentForm>();
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		try{
			List<Integer> roleid= session.createQuery("select roleId from UserRole where userId="+userId).list();
			int idrole=roleid.get(0);
			List<String> rolename=session.createQuery("select roleName FROM Role  where roleId="+idrole).list();
			if(idrole!=1001)
			{
				String nameofrole=rolename.get(0);
				List<UserComment> commentObjects= session.createQuery(" FROM UserComment uc  where userPerformanceLog_id="+id+" AND "+nameofrole.trim()+"!='no' ORDER BY uc.commentId DESC").list();  //userId = "+userId+" AND
				Iterator<UserComment> itr = commentObjects.iterator();
				while(itr.hasNext()) {
					UserComment comment=itr.next();
					UserCommentForm commentForm =new UserCommentForm();
					commentForm.setCommentId(comment.getCommentId());
					commentForm.setDate(comment.getDate());
					commentForm.setId(comment.getAppraisal().getId_app());
					commentForm.setUser_Comment(comment.getUser_Comment());
					commentForm.setUser_Name(comment.getUser_Name());
					commentForm.setAccountManager(comment.getAccountManager());
					commentForm.setManager(comment.getManager());
					commentForm.setClient(comment.getClient());
					commentForm.setUser(comment.getUser());
					commentList.add(commentForm);
				}
			}
			else
			{

				List<UserComment> commentObjects= session.createQuery(" FROM UserComment  where id="+id+" ORDER BY commentId DESC").list();  //userId = "+userId+" AND
				Iterator<UserComment> itr = commentObjects.iterator();
				while(itr.hasNext()) {
					UserComment comment=itr.next();
					UserCommentForm commentForm =new UserCommentForm();
					commentForm.setCommentId(comment.getCommentId());
					commentForm.setDate(comment.getDate());
					commentForm.setId(comment.getAppraisal().getId_app());
					commentForm.setUser_Comment(comment.getUser_Comment());
					commentForm.setUser_Name(comment.getUser_Name());
					commentForm.setAccountManager(comment.getAccountManager());
					commentForm.setManager(comment.getManager());
					commentForm.setClient(comment.getClient());
					commentForm.setUser(comment.getUser());
					commentList.add(commentForm);
				}
				transaction.commit();
			}
		}
		catch(Exception e)
		{
			logger.error("exception raised in getComments ");
			e.printStackTrace();
		}
		return commentList;
	}

	@Override
	public boolean deleteUserComment(int commentId) {
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		try{
			Query quryDel = session.createQuery("delete from UserComment where commentId="+commentId);
			quryDel.executeUpdate();
			transaction.commit();
			return true;
		}
		catch(Exception e)
		{
			logger.error("exception raised in deleteUserComment ");	
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<UserForm> getUsersListForPerformanceLogPage(int userId) {
		List<UserForm>  userformList = new ArrayList<UserForm>();
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		try{

			/*List<Integer> role= session.createQuery("select roleId from UserRole where userId="+userId).list(); 
			int roleId= role.get(0);
			if (roleId ==1002)
			{
				usersList= session.createQuery("From User where user_Id= "+userId).list();
				Iterator<User> itr = usersList.iterator();
				while(itr.hasNext()) {
					User user=itr.next();
					UserForm form =new UserForm();
					form.setUserId(user.getUser_Id());
					form.setUserName(user.getUser_name());
					userformList.add(form);
				}
			}
			else 
			{*/
				Query query = session.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm " +
						"where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );
				Iterator<String[]> it = query.list().iterator();
				while (it.hasNext()){
					User user=new User();
					Object[] obj = (Object[]) it.next();
					Integer userIdTemp=(Integer)obj[0];
					int userIdValue=userIdTemp.intValue();
					user.setUser_Id(userIdValue);
					user.setUser_name((String) obj[1]);

					UserForm form =new UserForm();
					form.setUserId(user.getUser_Id());
					form.setUserName(user.getUser_name());
					userformList.add(form);

				}
		/*	}*/
			transaction.commit();
		}
		catch(Exception e)
		{
			logger.error("exception raised in getUsersListForPerformanceLogPage ");		
			e.printStackTrace();	
		}
		return userformList;
	}

	@Override
	public List<UserForm> getUsersListForPerformanceLogPageSelectedUserOnTop(int userId,int selectedUserOnTop) {
		List<User> usersList = new ArrayList<User>();
		List<UserForm>  userformList = new ArrayList<UserForm>();
		Session session = HbnUtil.getSession();
		Transaction transaction = session.beginTransaction();
		try{

			List<Integer> role= session.createQuery("select roleId from UserRole where userId="+userId).list(); 
			int roleId= role.get(0);
			/*if (roleId ==1002)
			{
				usersList= session.createQuery("From User where user_Id= "+userId).list();
				Iterator<User> itr = usersList.iterator();
				while(itr.hasNext()) {
					User user=itr.next();
					UserForm form =new UserForm();
					form.setUserId(user.getUser_Id());
					form.setUserName(user.getUser_name());
					userformList.add(form);
				}
			}
			else 
			{*/
				Query query = session.createSQLQuery("select distinct(u.user_id),u.user_name from users u inner join report_mapping rm " +
						"where u.user_id=rm.report_map_id and rm.user_id="+userId+" order by u.user_name" );
				List<String> selectedUser  = session.createSQLQuery("select u.user_name from users u where u.user_id="+selectedUserOnTop).list();

				Iterator<String[]> it = query.list().iterator();
				while (it.hasNext()){
					User user=new User();
					Object[] obj = (Object[]) it.next();
					Integer userIdTemp=(Integer)obj[0];
					int userIdValue=userIdTemp.intValue();
					user.setUser_Id(userIdValue);
					user.setUser_name((String) obj[1]);
					if(userIdTemp!=selectedUserOnTop){
						UserForm form =new UserForm();
						form.setUserId(user.getUser_Id());
						form.setUserName(user.getUser_name());
						userformList.add(form);
					}

				}
				UserForm form =new UserForm();
				form.setUserId(selectedUserOnTop);
				form.setUserName(selectedUser.get(0));
				userformList.add(0, form);
			/*}*/
			transaction.commit();
		}
		catch(Exception e)
		{
			logger.error("exception raised in getUsersListForPerformanceLogPageSelectedUserOnTop ");		
			e.printStackTrace();	
		}
		return userformList;
	}

	@Override
	public String[] getRoleNames(int userId,int performanceUserID) {
		int roleId = 0;
		Session session = HbnUtil.getSession();
		String[] roleNames=null;
		try{

			List<Integer> role= session.createQuery("select roleId from UserRole where userId="+userId).list(); 
			roleId= role.get(0);
			List<String> query = session.createSQLQuery("SELECT user_name FROM users where user_id in " +
					"(SELECT user_id FROM user_role where role_id!=1002 and role_id!=1001 and user_id in" +
					" (SELECT user_id FROM report_mapping where report_map_id="+performanceUserID+"))" ).list();
			roleNames=new String[query.size()+1];
			Iterator it = query.iterator();
			int i=0;
			while(it.hasNext()){
				roleNames[i]=(String) it.next();
				i++;
			}if(performanceUserID!=0){
			List<String> temp=session.createSQLQuery("SELECT user_name FROM users where user_id="+performanceUserID).list() ;
			roleNames[i]=temp.get(0);}
			else 
			{logger.info("coming in if");
				roleNames[i]="notAssgined";	
			}
		}
		catch(Exception e)
		{
			logger.error("exception raised in getRoleNames ");
			e.printStackTrace();	

		}
		return roleNames;
	}
}
