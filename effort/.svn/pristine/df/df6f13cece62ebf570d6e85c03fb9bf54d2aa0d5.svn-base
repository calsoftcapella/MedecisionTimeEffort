package com.calsoft.leave.dao;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import com.calsoft.factory.Factory;
import com.calsoft.leave.model.Leave;
import com.calsoft.report.model.Report;
import com.calsoft.task.model.Task;
import com.calsoft.user.dao.UserDao;
import com.calsoft.user.model.User;
import com.calsoft.util.HbnUtil;

/*Dao Implementation class for LeaveEntry Module*/

public class LeaveDaoImpl implements LeaveDao {
	private static final Logger logger = Logger.getLogger("name");
	/* saveLeave() method :Performing the save operation of Leave Entry */

	HttpServletRequest request=null;
	@Override
	public void saveLeave(List leaveList,String[] checkDateNew,int userId,String selectMonthYear) throws Exception {
		Session session = HbnUtil.getSession();
		Transaction leaveTx = session.beginTransaction();
		String delete="delete from Leave AS leave where user_id="+userId+" and leave.leave_month Like '"+selectMonthYear+"%'";
		Query query=session.createQuery(delete);
		int deleted=query.executeUpdate();
		logger.info("deleted="+deleted);
		Iterator<Leave> itr=leaveList.iterator();
		while(itr.hasNext()){
			Leave leave=itr.next();

			String date = leave.getLeave_date();
			String month = leave.getLeave_month();
			String dateMonth = date+"-"+month;			
			DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
			DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
			Date f_date = df.parse(dateMonth);
			String formatedDate = df1.format(f_date);
			Query q1 = session.createQuery("from Task task where (user_id="+userId+" and task.task_date='"+formatedDate+"') and "
					+"(task.status='Leave' or task.status='Comp off' or task.status='Half Day')");
			List<Task> taskList = q1.list();
			if(taskList.isEmpty()){			
				Task task = new Task();
				User user = new User();
				user.setUser_Id(userId);
				task.setUser(user);
				task.setBacklog_id("NA");
				task.setTask_id("NA");
				task.setStatus("Leave");
				task.setTime("08:00");
				task.setTask_date(f_date);
				task.setTask_description("Availed leave today.");
				session.save(task);
			}
			session.save(leave);
		}
		leaveTx.commit();
	}

	/*
	 * getAllLeave() method :Retriving the all records for selected month of
	 * Leave Entry
	 */

	@Override
	public List<Leave> getAllLeave(String selectMonth,HttpServletRequest request) throws Exception
	{
		Session session = HbnUtil.getSession();
		int userId = Integer.parseInt(request.getSession().getAttribute("user_id").toString());
		String getLeave = "FROM Leave AS leave where user_id=" + userId
				+ " and leave_month Like '" + selectMonth
				+ "%' ORDER BY leave_date ASC";
		logger.info("query is from getAllLeave :"+getLeave);
		Query query = session.createQuery(getLeave);
		List leaveList = query.list();

		Iterator it = leaveList.iterator();
		while (it.hasNext()) 
		{
			Leave halfLeave = (Leave) it.next();
			//System.out.println("iterator is on way"+halfLeave.getLeave_date()+", "+halfLeave.getLeave_month()+", "+halfLeave.getUpdated_on());
			String dateH = halfLeave.getLeave_date();
			String monthH = halfLeave.getLeave_month();

			String leaveDate = dateH+"-"+monthH;
			SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
			SimpleDateFormat sf1 = new SimpleDateFormat("yyyy-MM-dd");
			Date date1 = sf.parse(leaveDate);
			String formattedDate = sf1.format(date1);

			String sqlForHalfLeave = "select status from employee_task_detail where task_date='"+formattedDate+"' and status='Half Day' and user_id="+userId+"";
			Query queryLeave = session.createSQLQuery(sqlForHalfLeave);
			//System.out.println(queryLeave+"queryLeaveONN");
			List halfLeaveList = queryLeave.list();
			if(halfLeaveList!=null && !halfLeaveList.isEmpty())
			{
				String month = halfLeave.getLeave_month();
				halfLeave.setLeave_month(month+" (H)");
			}

		}
		logger.info("leaveList1...." + leaveList);
		return leaveList;
	}

	/*
	 * getLeaveDate() method :Retriving only dates for selected month of Leave
	 * Entry
	 */

	public List getLeaveDate(String selectMonth, HttpServletRequest request)
			throws Exception {
		Session session = HbnUtil.getSession();
		int userId = Integer.parseInt(request.getSession().getAttribute("user_id")
				.toString());
		String getLeave = "select leave_date FROM Leave AS leave where user_id="+ userId+" and leave_month Like '"+selectMonth+"%' ORDER BY leave_date ASC";
		logger.info("query is from getLeaveDate:"+getLeave);
		Query query = session.createQuery(getLeave);
		List leaveList = query.list();
		return leaveList;
	}

	/*
	 * getDashBoardList() method :Retriving specific records for selected month
	 * of Leave Entry
	 */

	public List<Leave> getDashBoardList(String selectMonthYear,
			HttpServletRequest request) throws Exception {
		List<Leave> leaveList = null;
		Session session = HbnUtil.getSession();
		int userId = Integer.parseInt(request.getSession().getAttribute("user_id")
				.toString());
		String getLeave = "from Leave AS leave where user_id=" + userId
				+ " and leave_month Like '" + selectMonthYear
				+ "%' group by leave.leave_month ORDER BY leave_date ASC";
		Query query = session.createQuery(getLeave);
		leaveList = query.list();

		return leaveList;
	}

	/*
	 * clearCheck() method :Removing records which are checked for selected
	 * month of Leave Entry
	 */

	public void clearCheck(List leaveList) throws Exception {
		Session session = HbnUtil.getSession();		
		Iterator<Leave> itr =leaveList.iterator();
		while(itr.hasNext())
		{
			Leave leave=itr.next();
			Transaction leaveTx = session.beginTransaction();
			//String checkMonth = leave.getLeave_month();
			String checkDate = leave.getLeave_date();
			int userId = leave.getUser().getUser_Id();
			String leave_month = leave.getLeave_month();			
			String monthYear = checkDate+"-"+leave_month;
			DateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
			DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
			Date f_date = df.parse(monthYear);
			String formatedDate = df1.format(f_date);
			Query taskQuery = session.createQuery("from Task task where (user_id="+userId+" and task.task_date='"+formatedDate+"') and "
					+"(task.status='Leave' or task.status='Comp off' or task.status='Half Day')");
			List<Task> task_list = taskQuery.list();
			if(!task_list.isEmpty()){
				Iterator<Task> itTask = task_list.iterator();
				while (itTask.hasNext()) {
					Task task = (Task) itTask.next();
					int task_id = task.getId();
					Query delete_qy = session.createQuery("delete from Task task where task.id="+task_id);
					delete_qy.executeUpdate();					
				}
			}		
			String clearDate = "delete from Leave  where user_id=" + userId+ " and (leave_date='"+checkDate+"' and leave_month='"+leave_month+"')";
			Query query = session.createQuery(clearDate);	
			query.executeUpdate();
			leaveTx.commit();
		}
	}

	@Override
	public List<List<Leave>> getLeaveDetailsUser(String[] allocatedResource,String dateString) {
		List<List<Leave>> superLeaveList = new ArrayList<List<Leave>>();
		try {
			Session session = HbnUtil.getSession();
			for (int i = 0; i < allocatedResource.length; i++) 
			{
				List<Leave> leaveList = new ArrayList<Leave>();
				int userId = Integer.parseInt(allocatedResource[i]);
				String sqlQuery = "select id,leave_month,leave_date,updated_on,user_id from  leave_detail ld where ld.user_id="
						+ userId
						+ " and  ld.leave_month like '"
						+ dateString
						+ "%" + "'";
				Query query = session.createSQLQuery(sqlQuery);
				Iterator<String[]> it = query.list().iterator();
				UserDao userDao = Factory.getDao();
				while (it.hasNext()) 
				{
					Leave leave = new Leave();
					Object[] obj = (Object[]) it.next();					
					String leaveDate = (String) obj[2]+"-"+(String) obj[1];
					SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
					SimpleDateFormat sf1 = new SimpleDateFormat("yyyy-MM-dd");
					Date date1 = sf.parse(leaveDate);
					String formattedDate = sf1.format(date1);
					String sqlForLeave = "select status from employee_task_detail where (task_date='"+formattedDate+"' and user_id="+userId+") and (status='Half Day' or status= 'Comp off')";
					Query queryLeave = session.createSQLQuery(sqlForLeave);
					//System.out.println(queryLeave+"queryLeaveONN");
					List<String> halfLeaveList = queryLeave.list();
					if(halfLeaveList!=null && !halfLeaveList.isEmpty())
					{
						String leaveStatus = halfLeaveList.get(0);
						if(leaveStatus.equalsIgnoreCase("Half Day")){
							leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]+" (H)");
						}
						else if(leaveStatus.equalsIgnoreCase("Comp off")){
							leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]+" (C)");
						}
					}
					else
					{
						leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]);
					}
					leave.setLeave_date((String) obj[2]);
					leave.setUpdated_on((Date) obj[3]);
					int userid = ((Integer) obj[4]).intValue();
					User user = userDao.getUser(userid);
					String userName = user.getUser_name();
					User user1 = new User();
					user1.setUser_name(userName);
					leave.setUser(user1);
					leaveList.add(leave);
				}
				superLeaveList.add(leaveList);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return superLeaveList;
	}


	/*
	 * getTeamLeaveDetail() method :Performing the get Team Leave Detail operation from
	 * getTeamLeaveDetail page of Leave Entry
	 */

	@Override
	public List<List<Leave>> getTeamLeaveDetail(List allocatedResource,String dateString)throws Exception {
		List<List<Leave>> superLeaveList = new ArrayList<List<Leave>>();
		logger.info("getTeamLeaveDetail LeaveDao");
		try {
			Session session = HbnUtil.getSession();
			Iterator<Report> itr=allocatedResource.iterator();
			while(itr.hasNext()){
				List<Leave> leaveList = new ArrayList<Leave>();
				int userId = itr.next().getUserId();
				String sqlQuery = "select id,leave_month,leave_date,updated_on,user_id from  leave_detail ld where ld.user_id="
						+ userId
						+ " and  ld.leave_month like '"
						+ dateString
						+ "%" + "'";

				Query query = session.createSQLQuery(sqlQuery);
				Iterator<String[]> it = query.list().iterator();
				UserDao userDao = Factory.getDao();
				while (it.hasNext()) 
				{
					Leave leave = new Leave();
					Object[] obj = (Object[]) it.next();
					leave.setLeave_month((String) obj[1]);
					leave.setLeave_date((String) obj[2]);

					String leaveDate = leave.getLeave_date()+"-"+leave.getLeave_month();
					SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
					SimpleDateFormat sf1 = new SimpleDateFormat("yyyy-MM-dd");
					Date date1 = sf.parse(leaveDate);
					String formattedDate = sf1.format(date1);
					String sqlForHalfLeave = "select status from employee_task_detail where task_date='"+formattedDate+"' and status='Half Day' and user_id="+userId+"";
					Query queryLeave = session.createSQLQuery(sqlForHalfLeave);
					// System.out.println(queryLeave+"queryLeaveONN");
					List halfLeaveList = queryLeave.list();
					if(halfLeaveList!=null && !halfLeaveList.isEmpty())
					{
						String month = leave.getLeave_month();
						leave.setLeave_month(month+" (H)");
					}

					leave.setUpdated_on((Date) obj[3]);
					int userid = ((Integer) obj[4]).intValue();
					User user = userDao.getUser(userid);
					String userName = user.getUser_name();
					User user1 = new User();
					user1.setUser_name(userName);
					leave.setUser(user1);
					leaveList.add(leave);
				}
				superLeaveList.add(leaveList);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return superLeaveList;
	}

	@Override
	public List<List<Leave>> getLeaveDetailsTeamWise(String[] teamDetails, String dateString) throws Exception {
		// TODO Auto-generated method stub
		List<List<Leave>> superLeaveList = new ArrayList<List<Leave>>();
		try {
			Session session = HbnUtil.getSession();
			for (int i = 0; i < teamDetails.length; i++){
				Query q1 = session.createSQLQuery("select distinct(con.user_id) from contact as con where con.team='"+teamDetails[i]+"'");
				List<Integer> user_list = q1.list();
				Iterator<Integer> itr = user_list.iterator();
				while(itr.hasNext()){
					int user_id = itr.next();
					List<Leave> leaveList = new ArrayList<Leave>();
					String sqlQuery = "select id,leave_month,leave_date,updated_on,user_id from  leave_detail ld where ld.user_id="
							+ user_id
							+ " and  ld.leave_month like '"
							+ dateString
							+ "%" + "'";
					Query query = session.createSQLQuery(sqlQuery);
					Iterator<String[]> it = query.list().iterator();
					UserDao userDao = Factory.getDao();
					while (it.hasNext()){
						Leave leave = new Leave();
						Object[] obj = (Object[]) it.next();					
						String leaveDate = (String) obj[2]+"-"+(String) obj[1];
						SimpleDateFormat sf = new SimpleDateFormat("dd-MMM-yyyy");
						SimpleDateFormat sf1 = new SimpleDateFormat("yyyy-MM-dd");
						Date date1 = sf.parse(leaveDate);
						String formattedDate = sf1.format(date1);						
						String sqlForLeave = "select status from employee_task_detail where (task_date='"+formattedDate+"' and user_id="+user_id+") and (status='Half Day' or status= 'Comp off')";
						Query queryLeave = session.createSQLQuery(sqlForLeave);
						//System.out.println(queryLeave+"queryLeaveONN");
						List<String> halfLeaveList = queryLeave.list();
						if(halfLeaveList!=null && !halfLeaveList.isEmpty())
						{
							String leaveStatus = halfLeaveList.get(0);
							if(leaveStatus.equalsIgnoreCase("Half Day")){
								leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]+" (H)");
							}
							else if(leaveStatus.equalsIgnoreCase("Comp off")){
								leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]+" (C)");
							}
						}
						else{
							leave.setLeave_month((String) obj[2]+"-"+(String) obj[1]);
						}
						leave.setLeave_date((String) obj[2]);
						leave.setUpdated_on((Date) obj[3]);
						int userid = ((Integer) obj[4]).intValue();
						User user = userDao.getUser(userid);
						String userName = user.getUser_name();
						User user1 = new User();
						user1.setUser_name(userName);
						leave.setUser(user1);
						leaveList.add(leave);	
					}	
					superLeaveList.add(leaveList);
				}									
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return superLeaveList;
	}

	@Override
	public List<Leave> getAllLeaveForYear(String year, List<User> userList) throws Exception {
		// Get all leave for selected Year
		List<Leave> list = new ArrayList<Leave>();
		try {
			Session session = HbnUtil.getSession();
			for (User user : userList) {
				Query q1 = session.createQuery("from Leave l where user_id="+user.getUser_Id()+" and l.leave_month like '%"+year+"%' order by l.updated_on");
				List<Leave> dbLeave = q1.list();
				if(!dbLeave.isEmpty()){
					for (Leave leave : dbLeave) {
						list.add(leave);
					}
				}
			}
		}
		catch (Exception e) {
			logger.error(e);
			e.printStackTrace();
			throw new Exception();
		}
		return list;
	}

}
