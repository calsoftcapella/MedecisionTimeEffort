package com.calsoft.performance.action;

import java.io.File;
import java.io.FileInputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.calsoft.factory.Factory;
import com.calsoft.performance.form.PerformanceLogForm;
import com.calsoft.performance.form.UserCommentForm;
import com.calsoft.performance.service.PerformanceLogService;
import com.calsoft.performance.servicefactory.PerformanceServiceFactory;
import com.calsoft.user.form.UserForm;
import com.calsoft.user.service.UserService;

public class PerformanceAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger("PerformanceAction");
	//private static String glassfishInstanceRootPropertyName = "com.sun.aas.instanceRoot";
	//private static String glassfishDomainConfigurationFolderNameFromPerformance = "/applications/effort";
	//private static String glassfishDomainConfigurationFolderNameFromPerformance = "/eclipseApps/effort";
	PerformanceLogService service;
	UserService userService;

	public ActionForward giveComment(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception{
		HttpSession session = request.getSession();
		PerformanceLogForm performanceLogForm=(PerformanceLogForm)form;
		if(session.getAttribute("user_id")!=null){
			service = PerformanceServiceFactory.getPerformanceService();
			int userId = (Integer) session.getAttribute("user_id");
			boolean status = false;
			status =service.saveUserComment(performanceLogForm, userId, performanceLogForm.getId());			
			int selectedResourceId = performanceLogForm.getUserId();			
			UserService userService = Factory.getUserService();
			if(selectedResourceId!=0){
				UserForm user_form = userService.getUsernameFromId(selectedResourceId);
				performanceLogForm.setUserName(user_form.getUserName());
				performanceLogForm.setEmail(user_form.getMail());
				request.setAttribute("forDisplay", performanceLogForm);
			}
			String meassage = null;
			if(status==true && selectedResourceId!=0){
				logger.info("comment inserted successfully");
				meassage = "Comment given to this objectives successfully.";
				Properties prop = new Properties();					 
				prop.load(new FileInputStream(request.getServletContext().getRealPath("getInformation.properties")));	
				if(userId!=selectedResourceId){
					String[] roles = performanceLogForm.getRoleNames();
					List<String> accessList = new ArrayList<String>();
					for (String names : roles) {
						accessList.add(names);
					}
					String selectdResourceForComment = performanceLogForm.getUserName();
					if(!accessList.isEmpty() && accessList.contains(selectdResourceForComment)){
						// Sending email notification to resource.
						meassage = service.sendEmailNotification(performanceLogForm, prop);
						request.setAttribute("emailStatus", meassage);
					}
				}
				else{
					meassage = service.sendEmailNotificationAfterResourceComment(performanceLogForm, prop);
					request.setAttribute("emailStatus", meassage);
				}
				request.setAttribute("commentStatus", meassage);
			}
			else{
				logger.info("comment not inserted successfully");
				meassage = "Failed to save comment for this objective.";
				request.setAttribute("commentFail", meassage);
			}
			PerformanceLogForm userPerformance = service.getPerformance(selectedResourceId,performanceLogForm.getPeriod());			
			List<UserCommentForm> commentList = service.getComments(userPerformance.getId(),userId);
			int selectedUserId=performanceLogForm.getUserId();
			String objective_period = performanceLogForm.getPeriod();
			Calendar cal = Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("MMM-yyyy");
			if(objective_period != null){
				cal.setTime(df.parse(objective_period.substring(0, objective_period.indexOf(' '))));
				cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
			}		
			List<UserForm> usersList = service.getUsersListForPerformanceLogPageSelectedUserOnTop(userId, cal);
			List<UserCommentForm> listObj= service.getRoleNames(userId,performanceLogForm.getUserId());
			String accountManager=service.accountManager(performanceLogForm, userId,  performanceLogForm.getId());
			request.setAttribute("accountManager", accountManager);
			request.setAttribute("listObj", listObj);
			request.setAttribute("updatedUsersList", usersList);
			request.setAttribute("commentList", commentList);
			request.setAttribute("userPerformance", userPerformance);
			request.setAttribute("selectedUserIdValue", selectedUserId);
		}
		return mapping.findForward("getUserDetailsSuccess");
	}
	public ActionForward performanceLogPage(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception{
		HttpSession session = request.getSession();
		if(session.getAttribute("userName")!=null){
			int userId =(Integer) session.getAttribute("user_id");
			logger.info("Performance log page ");
			try {
				service = PerformanceServiceFactory.getPerformanceService();
				PerformanceLogForm performanceLogForm = (PerformanceLogForm)form;
				String objective_period = performanceLogForm.getPeriod();				
				int selectedUserId = performanceLogForm.getUserId();
				Calendar cal = Calendar.getInstance();
				DateFormat df = new SimpleDateFormat("MMM-yyyy");
				if(objective_period != null){
					cal.setTime(df.parse(objective_period.substring(0, objective_period.indexOf(' '))));
					cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
				}			
				List<UserForm> usersList = null;
				PerformanceLogForm userPerformance = new PerformanceLogForm();
				UserForm user_form = new UserForm();
				user_form.setUserId(selectedUserId);
				usersList = service.getUsersListForPerformanceLogPageSelectedUserOnTop(userId, cal);
				userService = Factory.getUserService(); 
				if(selectedUserId != 0 && usersList.contains(user_form)){
					user_form = userService.getUsernameFromId(selectedUserId);
					userPerformance = service.getPerformance(performanceLogForm.getUserId(), objective_period);					
					List<UserCommentForm> commentList = service.getComments(userPerformance.getId(),userId);				
					List<UserCommentForm> listObj= service.getRoleNames(userId,performanceLogForm.getUserId());
					String accountManager=service.accountManager(performanceLogForm, userId,  performanceLogForm.getId());
					performanceLogForm.setUserName(user_form.getUserName());	
					//usersList = service.getUsersListForPerformanceLogPageSelectedUserOnTop(userId,selectedUserId, cal);
					request.setAttribute("forDisplay", performanceLogForm);
					request.setAttribute("accountManager", accountManager);
					request.setAttribute("listObj", listObj);
					request.setAttribute("commentList", commentList);		
					request.setAttribute("selectedUserIdValue", selectedUserId);
				}else{
					userPerformance.setCommonObjective("Select period and user  to  get Common Objective. ");
					userPerformance.setSpecificObjective("Select period and user to get Specific Objective. ");
				}				
				request.setAttribute("updatedUsersList", usersList);		
				request.setAttribute("userPerformance", userPerformance);
			}
			catch (Exception e) {
				logger.error(e);
			}
			return mapping.findForward("getUserDetailsSuccess");
		}
		else{
			throw new Exception();
		}
	}

	public ActionForward getSelectedperiodList(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception{
		HttpSession session = request.getSession();
		session.removeAttribute("selectedDate");
		session.removeAttribute("conList");
		session.removeAttribute("userList");
		session.removeAttribute("conListUpdate");
		if(session.getAttribute("userName")!=null){
			int userId =(Integer) session.getAttribute("user_id");
			logger.info("Performance log page ");
			Calendar cal = Calendar.getInstance();		
			try {
				service = PerformanceServiceFactory.getPerformanceService();
				PerformanceLogForm userPerformance = new PerformanceLogForm();
				userPerformance.setCommonObjective("Select period and user  to  get Common Objective. ");
				userPerformance.setSpecificObjective("Select period and user to get Specific Objective. ");
				//List<UserForm> usersList = service.getUsersListForPerformanceLogPage(userId);
				List<UserForm> usersList = service.getUsersListForPerformanceLogPageSelectedUserOnTop(userId, cal);
				request.setAttribute("usersList", usersList);
				request.setAttribute("userPerformance", userPerformance);
			}
			catch (Exception e) {
				logger.error(e);
			}
			return mapping.findForward("getUserDetailsSuccess");
		}
		else{
			throw new Exception();
		}
	}

	public void deleteComment(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception{
		logger.info("from deleteComment method ");
		HttpSession session = request.getSession();
		if(session.getAttribute("user_id")!=null){
			String commentid= request.getParameter("commentId");
			String commentDeletedFromUser = request.getParameter("commentDeletedFromUser");
			String period = request.getParameter("seletedPeriod");
			String commentField = request.getParameter("commentField");
			Integer userId = Integer.parseInt(session.getAttribute("user_id").toString());
			try {
				service = PerformanceServiceFactory.getPerformanceService();
				boolean status = service.deleteUserComment(Integer.parseInt(commentid));
				String filePath = getServlet().getServletContext().getRealPath("getInformation.properties");
				File f1 = new File(filePath);
				Properties prop = null;
				if(status && f1.exists()){	
					prop = new Properties();
					prop.load(new FileInputStream(f1));
					userService = Factory.getUserService();
					UserForm user_form = userService.getUsernameFromId(userId);
					String commentDeletedBy = user_form.getUserName();
					if((commentDeletedFromUser !=null && period!="") && commentField!=null){
						service.sendEmailAlertWhileDeletingComment(commentDeletedBy, commentDeletedFromUser.trim(), period.trim(), commentField, prop);
					}
					logger.info("comment deleted ");
				}
				else{
					logger.info("comment not deleted ");
				}
			}
			catch (Exception e) {
				logger.error(e);
			}
		}
		else {
			throw new Exception();
		}
	}

	public void editComment(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception{
		HttpSession session = request.getSession();
		if(session.getAttribute("userName")!=null){
			String commentid= request.getParameter("commentId");
			String comment= request.getParameter("user_Comment");
			try {
				boolean status = service.editUserComment(Integer.parseInt(commentid),comment);
				if(status){
					logger.info("comment edited successfully ");
				}
				else{
					logger.info("comment not  edited successfully ");
				}
			}
			catch (Exception e) {
				logger.error(e);
			}
		}
		else {
			throw new Exception();
		}
	}
	/*@Override
	public void execute(JobExecutionContext context)throws JobExecutionException{
		// Reminder for last week Time entry.
		logger.info("Weekly reminder is under processing from Action class. ");
		UserService userService;
		userService=Factory.getUserService();
		PerformanceLogService service = null;
		try {
			File f1 = readFileFromGlassfishDomainConfigFolder("getInformation.properties");
			File f2 = readFileFromGlassfishDomainConfigFolder("templateForMonReminder.xml");
			logger.info("check file exis or not from Performance Action "+f1.exists());
			if(f1.exists() && f2.exists()){
				Properties prop = new Properties();
				prop.load(new FileInputStream(f1));
				int allResourceUnderUserId = Integer.parseInt(prop.getProperty("dev_manager_id"));   // Get this userId from properties file
				String email = prop.getProperty("admimEmail");
				String pass = prop.getProperty("adminEmailPassword");
				if(allResourceUnderUserId!=0 && email!=null && pass!=null){
					List<String> getAllDatesForPreviousWeek = TimeUtility.getAllDatesForPreviousWeek();
					Calendar cal = Calendar.getInstance();				
					cal.setTime(Calendar.getInstance().getTime()); // Current Date 
					List<UserForm> allocatedUserList=userService.getAllocatedResourcesBasedOnExitDate(allResourceUnderUserId, cal);
					service = PerformanceServiceFactory.getPerformanceService();
					List<PerformanceLogForm> getNotEnteredResourceList =  service.checkPreviousWeekEntry(getAllDatesForPreviousWeek, allocatedUserList);
					if(!getNotEnteredResourceList.isEmpty()){
						String mailContent = ConfigureMailForMonReminder.getHtmlMailContentForMonReminder(getNotEnteredResourceList, f2);						
						service.sendNotificationEmail(mailContent, prop);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}	
	}
	private static File readFileFromGlassfishDomainConfigFolder( final String fileName ) throws FileNotFoundException
	{
		// Instance Root folder
		final String instanceRoot = System.getProperty( glassfishInstanceRootPropertyName );	    
		logger.info(" instanceRoot Value from Performance Action "+instanceRoot);    
		if (instanceRoot == null){
			throw new FileNotFoundException( "Cannot find Glassfish instanceRoot. Is the com.sun.aas.instanceRoot system property set?" );
		}
		// Instance Root + /config folder
		File configurationFolder = new File( instanceRoot + File.separator + glassfishDomainConfigurationFolderNameFromPerformance );
		logger.info("configurationFolder from Performance Action "+configurationFolder);	    
		File configFile = new File( configurationFolder, fileName );
		// return the given file
		return configFile;
	}*/
}