package com.calsoft.performance.service;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;

import com.calsoft.factory.Factory;
import com.calsoft.performance.dao.PerformanceLogDao;
import com.calsoft.performance.daofactory.PerformanceLogDaoFactory;
import com.calsoft.performance.form.PerformanceLogForm;
import com.calsoft.performance.form.UserCommentForm;
import com.calsoft.user.dao.UserDao;
import com.calsoft.user.form.UserForm;
import com.calsoft.user.model.Appraisal;
import com.calsoft.user.model.User;
import com.calsoft.util.EmailUtil;

public class PerformanceLogServiceImpl implements PerformanceLogService {
	private static final Logger logger = Logger.getLogger("PerformanceLogServiceImpl");
	@Override
	public PerformanceLogForm getPerformance(int userId, String period) {

		PerformanceLogForm performanceform = new PerformanceLogForm();
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		Appraisal userPerformanceLog = null;
		try {
			userPerformanceLog = dao.getPerformance(userId ,period);
			//List<String> roleNames= getRoleNames(userId);
		} catch (Exception e) {

			e.printStackTrace();
		}
		performanceform.setId(userPerformanceLog.getId_app());
		performanceform.setCommonObjective(userPerformanceLog.getComm_obj());
		performanceform.setSpecificObjective(userPerformanceLog.getSpec_obj());		
		performanceform.setUserId(userPerformanceLog.getUser().getUser_Id());				
		return performanceform;
	}
	@Override
	public String accountManager(PerformanceLogForm performanceLogForm,int userId , int id){
		PerformanceLogDao dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		String accountManager=dao.accountManager(performanceLogForm, userId, id);
		return accountManager;
	}
	@Override
	public List<PerformanceLogForm> getPeriodListForUser(int userId) {

		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		List<PerformanceLogForm> periodList = new ArrayList<PerformanceLogForm>();

		List<String> periodList1;
		try {
			periodList1 = dao.getPeriodListForUser(userId);

			Iterator<String> itr = periodList1.iterator();
			while (itr.hasNext()) {
				String period = itr.next();
				PerformanceLogForm form= new PerformanceLogForm();
				form.setPeriod(period);
				periodList.add(form);

			}
		} catch (Exception e) {

			e.printStackTrace();
		}
		return periodList;

	}

	@Override
	public boolean saveUserComment(PerformanceLogForm performanceLogForm,
			int userId , int id) {

		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		boolean status;
		try {
			status =dao.saveUserComment(performanceLogForm, userId, id);
			if (status==true)
			{
				return status;
			}
			else{
				return status;
			}
		} catch (Exception e) {

			e.printStackTrace();
			return false;
		}
	}

	@Override
	public List<UserCommentForm> getComments(int id,int userId) {
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		List<UserCommentForm> commentsList = null;
		try {
			if(id!=0)
				commentsList = dao.getComments(id, userId);
		} catch (Exception e) {

			e.printStackTrace();
		}
		return commentsList;
	}
	@Override
	public boolean deleteUserComment(int commentId) {

		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		boolean status;
		try {
			status =dao.deleteUserComment(commentId);
			if (status==true)
			{
				return status;
			}
			else{
				return status;
			}
		} catch (Exception e) {

			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean editUserComment(int commentId, String userComment) {
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		boolean status;
		try {
			status =dao.editUserComment(commentId, userComment);
			if (status==true)
			{
				return status;
			}
			else{
				return status;
			}
		} catch (Exception e) {

			e.printStackTrace();
			return false;
		}
	}
	@Override
	public List<UserForm> getUsersListForPerformanceLogPage(int userId) {
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		List<UserForm> usersList = null;
		try {
			usersList = dao.getUsersListForPerformanceLogPage(userId);
		} catch (Exception e) {

			e.printStackTrace();
		}
		return usersList;
	}

	@Override
	public List<UserForm> getUsersListForPerformanceLogPageSelectedUserOnTop(int userId , int selectedUserOnTop) {
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		List<UserForm> usersList = null;
		try {
			if(selectedUserOnTop!=0)
				usersList = dao.getUsersListForPerformanceLogPageSelectedUserOnTop(userId,selectedUserOnTop);
		} catch (Exception e) {

			e.printStackTrace();
		}
		return usersList;
	}
	@Override
	public List<UserCommentForm> getRoleNames(int userId,int performanceUserID) {
		PerformanceLogDao dao;
		dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		List<UserCommentForm> roleNames=new ArrayList<UserCommentForm>();
		String[] roleNames1=dao.getRoleNames(userId, performanceUserID);

		UserCommentForm form= new UserCommentForm();
		form.setRoleNames(roleNames1);
		roleNames.add(form);
		return roleNames;
	}
	@Override
	public String sendEmailNotification(PerformanceLogForm performanceLogForm, Properties props) {
		String message = null;
		try{
			String senderEmail = props.getProperty("admimEmail");
			String userNameForsenderEmail = props.getProperty("adminEmailUsername");
			String passeForSenderMail = props.getProperty("adminEmailPassword");
			String recipientMailId = performanceLogForm.getEmail();
			message = EmailUtil.sendEmail("linmail.calsoftlabs.com", "465",senderEmail, passeForSenderMail,userNameForsenderEmail, recipientMailId,
					" Comment added to account. ", "Hi," + "<br><br>"
							+ "&nbsp;Comment has been added to yours timesheet account.<br>"
							+"Please visit <a href='http://pepq.calsoftlabs.com/effort'>http://pepq.calsoftlabs.com/effort</a> to view comment."
							+"<br>"
							+"<br>"
							+ "Regards" + "<br>" + "Raghavi");
			if(message.equalsIgnoreCase("") || message.equalsIgnoreCase("Sending Failed")){
				throw new Exception();
			}
		}
		catch (Exception e) {
			message = "Failed to send email notification to resource.";
		}
		return message;
	}
	@Override
	public List<Integer> checkPreviousWeekEntry(List<String> getAllDatesForPreviousWeek, List<UserForm> allocatedUserList, int allResourceUnderUserId) {
		List<Integer> notEnteredUserList = new ArrayList<Integer>();
		PerformanceLogDao dao = PerformanceLogDaoFactory.getPerformanceLogDao();
		notEnteredUserList = dao.checkPreviousWeekEntry(getAllDatesForPreviousWeek, allocatedUserList, allResourceUnderUserId);	
		return notEnteredUserList;
	}
	@Override
	public void sendNotificationEmail(List<Integer> getNotEnteredResource, int userIdLoggedComment, List<String> getAllDatesForPreviousWeek, Properties prop) {
		//Sending notification mail for last week missing entrydao = Factory.getDao();
		UserDao dao =  Factory.getDao();
		PerformanceLogDao performanceDao = PerformanceLogDaoFactory.getPerformanceLogDao();
		boolean status = false;
		User userToWhomCommentWillAdd = null;
		// Mailing details.
		
		String host = prop.getProperty("host_name").trim();
		String port = prop.getProperty("port_number").trim();
		String userIds = prop.getProperty("adminEmailUsername").trim();
		String password = prop.getProperty("adminEmailPassword").trim();
		String from = prop.getProperty("admimEmail").trim();
		
		User userWhoLoggedComment = dao.getUsernameFromId(userIdLoggedComment);
		for (Integer userId : getNotEnteredResource) {
			if(userId!=0)
				userToWhomCommentWillAdd = dao.getUsernameFromId(userId);
			status = performanceDao.addCommentAndSendMail(userToWhomCommentWillAdd, userWhoLoggedComment, getAllDatesForPreviousWeek);
			if(status){
				if(userToWhomCommentWillAdd!=null){
					String to = userToWhomCommentWillAdd.getMail();
					String subject = "Comment added in Performance log";
					String username = userToWhomCommentWillAdd.getUser_name();
					String userNameForReceipient = "";
					if(username!=null && username.indexOf(" ")!=-1){
						userNameForReceipient = username.substring(0, username.indexOf(" "));
					}
					else if(username!=null){
						userNameForReceipient = username;
					}
					String text = "Hi "+userNameForReceipient+",<br><br>"
							+"&nbsp;&nbsp;"+"A comment has been added to your performance log. Kindly check it in "
							+"<a href='http://pepq.calsoftlabs.com/effort/'>pepq.calsoftlabs.com/effort/</a>.<br><br>"
							+"Thanks and Regards<br>Raghavi.";
					try {
						EmailUtil.sendEmail(host, port, userIds, password, from, to, subject, text);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}			
		}		
	}

}
